<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Indigo</name>
    </assembly>
    <members>
        <member name="T:Indigo.Audio.Sound">
            <summary>
            Basic sound class.
            Supports streaming for large files, or memory buffers for small ones.
            </summary>
        </member>
        <member name="M:Indigo.Audio.Sound.#ctor(Indigo.Audio.SoundBuffer)">
            <summary>
            Constructor.
            Create a sound from an audio buffer in memory.
            </summary>
            <param name="buffer">The sound buffer to use.</param>
        </member>
        <member name="M:Indigo.Audio.Sound.#ctor(Indigo.Audio.SoundStream)">
            <summary>
            Constructor.
            Create a sound that streams a file from the disk.
            </summary>
            <param name="stream">The sound stream to use.</param>
        </member>
        <member name="M:Indigo.Audio.Sound.Play">
            <summary>
            <para>If playback hasn't yet begun, play it from the beginning.</para>
            <para>If playback is paused, resume it from its last position.</para>
            </summary>
        </member>
        <member name="M:Indigo.Audio.Sound.Play(System.Double)">
            <summary>
            Starts playback at a specific point in the track.
            </summary>
            <param name="millisecondsOffset">How far in the track to start at supplied in milliseconds</param>
        </member>
        <member name="M:Indigo.Audio.Sound.Stop">
            <summary>
            Stop playback.
            </summary>
        </member>
        <member name="M:Indigo.Audio.Sound.DisposeSound">
            <summary>
            Disposes the SoundProvider, allowing it to release the OpenAL handle.
            This is NOT the same as the Disposable pattern.
            </summary>
        </member>
        <member name="P:Indigo.Audio.Sound.Playing">
            <summary>
            Whether the sound is currently playing.
            </summary>
        </member>
        <member name="P:Indigo.Audio.Sound.Looping">
            <summary>
            <para>Whether the sound should repeat when it completes.</para>
            <para>If this is set to true, the OnComplete event will fire each time the sound restarts.</para>
            </summary>
        </member>
        <member name="P:Indigo.Audio.Sound.Volume">
            <summary>
            The volume of the sound, from 0 (fully silent) to 1 (max volume).
            </summary>
        </member>
        <member name="P:Indigo.Audio.Sound.Position">
            <summary>
            Current position of the playhead, in seconds.
            </summary>
        </member>
        <member name="P:Indigo.Audio.Sound.Length">
            <summary>
            Length of the sound, in seconds.
            </summary>
        </member>
        <member name="P:Indigo.Audio.Sound.Completion">
            <summary>
            The completion value of the playing sound, from 0 (no progress) to 1 (completely finished).
            </summary>
        </member>
        <member name="T:Indigo.Audio.SoundStream">
            <summary>
            Sound provider for steaming large files.
            </summary>
        </member>
        <member name="T:Indigo.Camera">
            <summary>
            Camera class. Allows rotation, scale and positioning of the render view.
            Also supports viewports for split-screen, minimaps, etc.
            </summary>
        </member>
        <member name="F:Indigo.Camera.X">
            <summary>
            X position of the camera.
            </summary>
        </member>
        <member name="F:Indigo.Camera.Y">
            <summary>
            Y position of the camera.
            </summary>
        </member>
        <member name="P:Indigo.Camera.Left">
            <summary>
            Left edge of the camera.
            </summary>
        </member>
        <member name="P:Indigo.Camera.Top">
            <summary>
            Top edge of the camera.
            </summary>
        </member>
        <member name="P:Indigo.Camera.Right">
            <summary>
            Right edge of the camera.
            </summary>
        </member>
        <member name="P:Indigo.Camera.Bottom">
            <summary>
            Bottom edge of the camera.
            </summary>
        </member>
        <member name="M:Indigo.Camera.SetRenderX(Indigo.Graphics.Graphic,System.Single)">
            <summary>
            Set the position of a Graphic relative to the screen, compensating for its scroll factor.
            </summary>
            <param name="graphic">The graphic to set position on.</param>
            <param name="x"></param>
        </member>
        <member name="M:Indigo.Camera.SetRenderY(Indigo.Graphics.Graphic,System.Single)">
            <summary>
            Set the position of a Graphic relative to the screen, compensating for its scroll factor.
            </summary>
            <param name="graphic">The graphic to set position on.</param>
            <param name="y">Y position.</param>
        </member>
        <member name="M:Indigo.Camera.GetRenderX(Indigo.Graphics.Graphic)">
            <summary>
            Get the position of a Graphic relative to the screen, compensating for its scroll factor.
            </summary>
            <param name="graphic">The graphic to get position from.</param>
            <returns>The relative position.</returns>
        </member>
        <member name="M:Indigo.Camera.GetRenderY(Indigo.Graphics.Graphic)">
            <summary>
            Get the position of a Graphic relative to the screen, compensating for its scroll factor.
            </summary>
            <param name="graphic">The graphic to get position from.</param>
            <returns>The relative position.</returns>
        </member>
        <member name="M:Indigo.Camera.ContainsPoint(System.Single,System.Single)">
            <summary>
            Whether a given point is in view of the camera.
            </summary>
            <param name="x">Point x.</param>
            <param name="y">Point Y.</param>
        </member>
        <member name="P:Indigo.Colliders.Collider.X">
            <summary>Position of this Collider relative to the Entity it's attached to.</summary>
        </member>
        <member name="P:Indigo.Colliders.Collider.Y">
            <summary>Position of this Collider relative to the Entity it's attached to.</summary>
        </member>
        <member name="P:Indigo.Colliders.Collider.OriginX">
            <summary>Origin of this Collider.</summary>
        </member>
        <member name="P:Indigo.Colliders.Collider.OriginY">
            <summary>Origin of this Collider.</summary>
        </member>
        <member name="M:Indigo.Colliders.HitGrid.Invert">
            <summary>
            Creates a new HitGrid of the same size and sets its contents to the opposite of this one.
            Does not set type or anything else!
            </summary>
            <returns>The inverted grid</returns>
        </member>
        <member name="P:Indigo.Components.Movement.Types">
            <summary>The collision types that this movement should check against.</summary>
        </member>
        <member name="F:Indigo.Components.Movement.UseBresenham">
            <summary>
            Whether Bresenham's line drawing algorithm should be used to move the entity.
            Default should be false; set to true for more accurate results but reduced performance.
            </summary>
        </member>
        <member name="F:Indigo.Components.Movement.Precision">
            <summary>
            Precision when moving the entity in steps.
            Default should be 1; set higher for less accurate results but improved performance.
            </summary>
        </member>
        <member name="E:Indigo.Components.Movement.OnCollideX">
            <summary>
            When the entity is moved into a collider on the X axis, this determines whether it should stop. Return false to ignore the collision.
            If multiple handlers are added, all will be run; collision will only be ignored if all handlers return false.
            </summary>
        </member>
        <member name="E:Indigo.Components.Movement.OnCollideY">
            <summary>
            When the entity is moved into a collider on the Y axis, this determines whether it should stop. Return false to ignore the collision.
            If multiple handlers are added, all will be run; collision will only be ignored if all handlers return false.
            </summary>
        </member>
        <member name="M:Indigo.Components.Movement.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Indigo.Components.Movement.#ctor(System.String[])">
            <summary>
            Constructor. Initializes the component with a series of collision types.
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Indigo.Components.Movement.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor. Initializes the component with an enumerable of collision types.
            </summary>
        </member>
        <member name="M:Indigo.Components.Movement.MoveTo(System.Single,System.Single)">
            <summary>
            Move the entity to the specified position.
            </summary>
            <param name="destinationX">The destination of the entity on the X axis.</param>
            <param name="destinationY">The destination of the entity on the Y axis.</param>
            <returns>Whether the entity reached its destination without being stopped.</returns>
        </member>
        <member name="M:Indigo.Components.Movement.MoveBy(System.Single,System.Single)">
            <summary>
            Move the entity by a given amount.
            </summary>
            <param name="amountX">The amount the entity should move on the X axis.</param>
            <param name="amountY">The amount the entity should move on the Y axis.</param>
            <returns>Whether the entity reached its destination without being stopped.</returns>
        </member>
        <member name="M:Indigo.Components.Movement.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
            Move the entity towards the specified position. Will not overshoot.
            </summary>
            <param name="destinationX">The destination of the entity on the X axis.</param>
            <param name="destinationY">The destination of the entity on the Y axis.</param>
            <param name="distance">Max distance to move.</param>
            <returns>Whether the entity reached its destination without being stopped.</returns>
        </member>
        <member name="T:Indigo.Components.CoroutineHost">
            <summary>
            Simple coroutine manager.
            </summary>
        </member>
        <member name="M:Indigo.Components.CoroutineHost.WaitForMessage(System.Enum)">
            <summary>
            Causes the calling coroutine to wait until its host recieves a message of the specified type.
            </summary>
            <param name="message">The message type to wait for.</param>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Indigo.Components.CoroutineHost.WaitForSeconds(System.Single)">
            <summary>
            Causes the calling coroutine to wait for a given number of seconds.
            </summary>
            <param name="seconds">The amount of seconds to wait.</param>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Indigo.Components.CoroutineHost.WaitForFrames(System.Int32)">
            <summary>Causes the calling coroutine to wait for a given number of frames.
            <para>If you want to wait a single frame, it's better to use <code>yield return null;</code></para>
            </summary>
            <param name="frames">The number of frames to wait.</param>
            <returns>IEnumerator</returns>
        </member>
        <member name="M:Indigo.Components.CoroutineHost.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Indigo.Components.CoroutineHost.Start(System.Collections.IEnumerator)">
            <summary>
            Start a new coroutine.
            </summary>
            <param name="routine">An IEnumerator (created by calling a function which yields).</param>
            <returns>The coroutine that was started, used to stop it running.</returns>
        </member>
        <member name="M:Indigo.Components.CoroutineHost.Stop(System.Collections.IEnumerator)">
            <summary>
            Stop the given coroutine.
            </summary>
            <param name="routine">The coroutine to stop.</param>
            <returns>Whether the stopped coroutine was contained in this host.</returns>
        </member>
        <member name="M:Indigo.Components.CoroutineHost.StopAll">
            <summary>
            Stop all coroutines in the host.
            </summary>
        </member>
        <member name="P:Indigo.Components.CoroutineHost.Count">
            <summary>
            How many coroutines are currently running.
            </summary>
        </member>
        <member name="P:Indigo.Components.CoroutineHost.Running">
            <summary>
            Whether any coroutines are currently running.
            </summary>
        </member>
        <member name="P:Indigo.Components.CoroutineHost.Current">
            <summary>
            The currently executing routine.
            </summary>
        </member>
        <member name="T:Indigo.Components.OnFrame">
            <summary>
            Simple class that allows a lambda function to run every frame.
            </summary>
        </member>
        <member name="M:Indigo.Components.OnFrame.#ctor(System.Action{Indigo.GameTime})">
            <summary>
            <para>Constructor.</para>
            </summary>
            <param name="action">The function to run each frame.</param>
        </member>
        <member name="P:Indigo.Components.Spliner.TimeRemaining">
            <summary>
            The time remaining before the spline ends or repeats.
            </summary>
        </member>
        <member name="P:Indigo.Components.Spliner.Completion">
            <summary>
            A value between 0 and 1, where 0 means the spline has not been started and 1 means that it has completed.
            </summary>
        </member>
        <member name="P:Indigo.Components.Spliner.Looping">
            <summary>
            Whether the spline is currently looping.
            </summary>
        </member>
        <member name="P:Indigo.Components.Spliner.Target">
            <summary>
            The object this spline targets.
            </summary>
        </member>
        <member name="M:Indigo.Components.Spliner.#ctor">
            <summary>
            Constructor. Does no actual work; call Spline() to set up motion.
            </summary>
        </member>
        <member name="M:Indigo.Components.Spliner.Spline``2(``0,System.Single,System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Set the motion for this spline.
            </summary>
            <param name="target">The object the motion should target. Must be non-null and a reference type.</param>
            <param name="duration">How long the motion should take, in seconds.</param>
            <param name="points">The points that the motion should spline between.</param>
            <returns>A reference to this, for specifying additional parameters.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.Spline``2(``0,System.Single,``1[])">
            <summary>
            Set the motion for this spline.
            </summary>
            <param name="target">The object the motion should target. Must be non-null and a reference type.</param>
            <param name="duration">How long the motion should take, in seconds.</param>
            <param name="points">The points that the motion should spline between.</param>
            <returns>A reference to this, for specifying additional parameters.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.Ease(System.Func{System.Single,System.Single})">
            <summary>
            Set the easing function.
            </summary>
            <param name="ease">The Easer to use.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.OnBegin(System.Action)">
            <summary>
            Set a function to call when motion begins (useful when using delays). Can be called multiple times for compound callbacks.
            </summary>
            <param name="callback">The function that will be called when motion starts, after the delay.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.OnComplete(System.Action)">
            <summary>
            Set a function to call when motion finishes. Can be called multiple times for compound callbacks.
            If the spliner repeats infinitely, this will be called each time; otherwise it will only run when the spliner is finished repeating.
            </summary>
            <param name="callback">The function that will be called on motion completion.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.OnUpdate(System.Action)">
            <summary>
            Set a function to call as the spliner updates. Can be called multiple times for compound callbacks.
            </summary>
            <param name="callback">The function to use.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.Repeat(System.Int32)">
            <summary>
            Enable repeating.
            </summary>
            <param name="times">Number of times to repeat. Leave blank or pass a negative number to repeat infinitely.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.RepeatDelay(System.Single)">
            <summary>
            Set a delay for when motion repeats.
            </summary>
            <param name="delay">How long to wait before repeating.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.Reflect">
            <summary>
            Sets motion to reverse every other time it repeats. Repeating must be enabled for this to have any effect.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.Reverse">
            <summary>
            Reverses the spline for each property being animated.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Indigo.Components.Spliner.Cancel">
            <summary>
            Stop motion without calling complete callbacks.
            </summary>
        </member>
        <member name="M:Indigo.Components.Spliner.CancelAndComplete">
            <summary>
            Assign target its final values and stop.
            </summary>
        </member>
        <member name="M:Indigo.Components.Spliner.Pause">
            <summary>
            Pause spliner. Motion will not update and delay won't tick down.
            </summary>
        </member>
        <member name="M:Indigo.Components.Spliner.PauseToggle">
            <summary>
            Toggle whether the motion is paused.
            </summary>
        </member>
        <member name="M:Indigo.Components.Spliner.Resume">
            <summary>
            Resumes motion from a paused state.
            </summary>
        </member>
        <member name="F:Indigo.Components.StateMachine.InvalidState">
            <summary>
            Constant value equalling -1.
            </summary>
        </member>
        <member name="P:Indigo.Components.StateMachine.StateFrames">
            <summary>
            How many frames the current state has been active for.
            </summary>
        </member>
        <member name="P:Indigo.Components.StateMachine.StateTime">
            <summary>
            How long (in seconds) the current state has been active for.
            </summary>
        </member>
        <member name="M:Indigo.Components.StateMachine.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Indigo.Components.StateMachine.AddState(System.Action,System.Action,System.Action)">
            <summary>
            Add a new state to the state machine.
            </summary>
            <param name="begin">The function to call when the state begins. Can be null.</param>
            <param name="update">The function to call while the state is active. Can be null.</param>
            <param name="end">The function to call when the state ends. Can be null.</param>
            <returns>The state ID.</returns>
        </member>
        <member name="M:Indigo.Components.StateMachine.AddState(System.Action)">
            <summary>
            Add a new state to the state machine.
            </summary>
            <param name="update">The function to call while the state updates. Can be null.</param>
            <returns>The state ID.</returns>
        </member>
        <member name="M:Indigo.Components.StateMachine.PushState(System.Int32)">
            <summary>
            Push a state onto a stack, preserving the existing state or states.
            </summary>
            <param name="state">The state to push.</param>
        </member>
        <member name="M:Indigo.Components.StateMachine.PopState">
            <summary>
            Removes the current state and transitions to the next one on the stack.
            </summary>
            <returns>The ID of the state that was removed, or -1 if the stack was empty.</returns>
        </member>
        <member name="M:Indigo.Components.StateMachine.ChangeState(System.Int32)">
            <summary>
            <para>Switches to a different state.</para>
            <para>If the stack is not empty, this will cause an error.</para>
            </summary>
            <param name="state">The state to switch to.</param>
        </member>
        <member name="M:Indigo.Components.StateMachine.ResetState">
            <summary>
            Reset the current state's timers and call its begin function, if it exists.
            </summary>
        </member>
        <member name="P:Indigo.Components.UI.Event.Sender">
            <summary>
            The UIObject that this event originated from.
            </summary>
        </member>
        <member name="P:Indigo.Components.UI.Event.Current">
            <summary>
            The UIObject  that this event is currently active on.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.Event.StopPropagation">
            <summary>
            Prevents this event from propagating upwards.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.Event.Cancel">
            <summary>
            Stops propagation and prevents other handlers on the same UIObject from being called.
            </summary>
        </member>
        <member name="T:Indigo.Components.UI.UIRoot">
            <summary>
            Description of GuiRoot.
            </summary>
        </member>
        <member name="P:Indigo.Components.UI.UIRoot.Focus">
            <summary>
            The currently focused UI object, which recieves Keyboard events.
            </summary>
        </member>
        <member name="T:Indigo.Components.UI.UIObjectContainer">
            <summary>
            Description of WidgetContainer.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.AddChild``1(``0)">
            <summary>
            Adds a child to the container and returns it.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.RemoveChild``1(``0)">
            <summary>
            Removes a child from the container and returns it.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.RemoveAll">
            <summary>
            Removes all children from the container.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.BringForward(Indigo.Components.UI.UIObject)">
            <summary>
            Moves the specified child one place forward in the list.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.SendBackward(Indigo.Components.UI.UIObject)">
            <summary>
            Moves the specified child one place backward in the list.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.BringToFront(Indigo.Components.UI.UIObject)">
            <summary>
            Moves the specified child to the front of the list.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.SendToBack(Indigo.Components.UI.UIObject)">
            <summary>
            Moves the specified child to the back of the list.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.Swap(Indigo.Components.UI.UIObject,Indigo.Components.UI.UIObject)">
            <summary>
            Swaps two children in the list.
            </summary>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.GetChildByName(System.String,System.Int32)">
            <summary>
            Searches for a child object with the given name. If more than one match exists, the first one encountered will be returned.
            </summary>
            <param name="name">The name to search for</param>
            <param name="recurseDepth">(Optional) Maximum depth for the search to recurse.</param>
            <returns>The found child, or null if none exist.</returns>
        </member>
        <member name="M:Indigo.Components.UI.UIObjectContainer.Contains(Indigo.Components.UI.UIObject)">
            <summary>
            Whether the given child is this object, or is contained by this object directly or indirectly.
            </summary>
        </member>
        <member name="T:Indigo.Component">
            <summary>
            Base class for graphics, masks, and other things that add functionality to Entities.
            </summary>
        </member>
        <member name="F:Indigo.Component.Active">
            <summary>
            Whether this component should update.
            </summary>
        </member>
        <member name="P:Indigo.Component.Parent">
            <summary>
            The Entity that this component has been added to.
            </summary>
        </member>
        <member name="P:Indigo.Component.Tweener">
            <summary>
            The Tweener updated by this component.
            </summary>
        </member>
        <member name="P:Indigo.Component.UpdateStep">
            <summary>
            <para>The order in which this Component will be updated by its Entity.</para>
            <para>Lower numbers will be updated earlier than higher numbers.</para>
            </summary>
        </member>
        <member name="M:Indigo.Component.Update(Indigo.GameTime)">
            <summary>
            Override this.
            Called every frame when Active and added to an Active Entity in an Active World.
            </summary>
        </member>
        <member name="M:Indigo.Component.Added">
            <summary>
            Override this.
            Called after being added to an Entity.
            </summary>
        </member>
        <member name="M:Indigo.Component.SiblingAdded(Indigo.Component)">
            <summary>
            Override this.
            Called when another component is added to the entity this component is attached to.
            <param name="c">The component that was added.</param>
            </summary>
        </member>
        <member name="M:Indigo.Component.ParentAdded">
            <summary>
            Override this.
            Called when the entity this is attached to is added to the world.
            </summary>
        </member>
        <member name="M:Indigo.Component.Removed">
            <summary>
            Override this.
            Called just before being removed from an Entity.
            </summary>
        </member>
        <member name="M:Indigo.Component.SiblingRemoved(Indigo.Component)">
            <summary>
            Override this.
            Called when another component is removed from the entity this component is attached to.
            <param name="c">The component that was removed.</param>
            </summary>
        </member>
        <member name="M:Indigo.Component.ParentRemoved">
            <summary>
            Override this.
            Called when the entity this is attached to is removed from the world.
            </summary>
        </member>
        <member name="M:Indigo.Component.RenderDebug(Indigo.Debugging.DebugConsole)">
            <summary>
            Override this.
            Used to display debug information to the Console.
            </summary>
        </member>
        <member name="T:Indigo.Content.Font">
            <summary>
            Description of Font.
            </summary>
        </member>
        <member name="T:Indigo.Content.Providers.SoundBufferProvider">
            <summary>
            Description of Provider.
            </summary>
        </member>
        <member name="P:Indigo.Core.Rectangle.Left">
            <summary>
            X coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Indigo.Core.Rectangle.Top">
            <summary>
            Y coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Indigo.Core.Rectangle.Right">
            <summary>
            X cordinate of the rectangle's right edge.
            </summary>
        </member>
        <member name="P:Indigo.Core.Rectangle.Bottom">
            <summary>
            Y coordinate of the rectangle's bottom edge.
            </summary>
        </member>
        <member name="M:Indigo.Core.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Indigo.Core.Rectangle.Union(Indigo.Core.Rectangle,Indigo.Core.Rectangle)">
            <summary>
            Create a rectangle from the combined bounds of two rectangles.
            </summary>
            <param name="a">The first rectangle.</param>
            <param name="b">The second rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Indigo.Core.Rectangle.Intersects(Indigo.Core.Rectangle)">
            <summary>
            Whether this rectangle overlaps with another.
            </summary>
            <param name="other">The rectangle to check overlap against.</param>
        </member>
        <member name="F:Indigo.Core.Point.Zero">
            <summary>
            Zero vector {0, 0}.
            </summary>
        </member>
        <member name="M:Indigo.Core.Point.FromAngle(System.Single,System.Single)">
            <summary>
            <para>Creates a new Point as a direction vector.</para>
            <para>This is a shortcut for using MathHelper.AngleXY()</para>
            </summary>
            <param name="angle">The angle to represent.</param>
            <param name="length">The length of the angle.</param>
            <returns>The created Point.</returns>
        </member>
        <member name="M:Indigo.Core.Point.Dot(Indigo.Core.Point)">
            <summary>
            Get the dot product of this and another vector.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Indigo.Core.Point.Normalize(System.Single)">
            <summary>
            Scales the line segment between { 0, 0 } and the current point to a set length.
            </summary>
            <param name="length">The length to scale the vector to (default 1).</param>
        </member>
        <member name="M:Indigo.Core.Point.Normalized(System.Single)">
            <summary>
            Returns a normalized copy of this vector. The original vector is unmodified.
            </summary>
            <param name="length">The length to scale the vector to (default 1).</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Indigo.Core.Point.Truncated(System.Single)">
            <summary>
            Returns a truncated copy of this vector. The original vector is unmodified.
            </summary>
            <param name="max">The maximum length of the resulting vector.</param>
            <returns>The truncated vector.</returns>
        </member>
        <member name="M:Indigo.Core.Point.Truncate(System.Single)">
            <summary>
            Scales this vector so that its length is not greater then "max" parameter.
            </summary>
            <param name="max">The maximum length of the resulting vector.</param>
        </member>
        <member name="P:Indigo.Core.Point.Length">
            <summary>
            The length of the vector.
            </summary>
        </member>
        <member name="P:Indigo.Core.Point.SquaredLength">
            <summary>
            The squared length of the vector. Faster than calculating length.
            </summary>
        </member>
        <member name="F:Indigo.Core.Point.X">
            <summary>
            Position component.
            </summary>
        </member>
        <member name="F:Indigo.Core.Point.Y">
            <summary>
            Position component.
            </summary>
        </member>
        <member name="T:Indigo.Library">
            <summary>
            Content management and caching.
            </summary>
        </member>
        <member name="M:Indigo.Library.AddProvider``1(Indigo.Content.ContentProvider{``0})">
            <summary>
            Load assets from a library provider.
            </summary>
            <param name="provider">The provider to load assets from.</param>
        </member>
        <member name="M:Indigo.Library.Get``1(System.String)">
            <summary>
            Get an asset of type TContentType, loading it if necessary.
            </summary>
            <param name="filename">The file's path </param>
            <returns></returns>
        </member>
        <member name="M:Indigo.Library.GetFolders(System.String,System.String)">
            <summary>
            Gets an enumerable of folders, taking search paths into consideration. An Indigo-friendly alias for Directory.GetDirectories()
            </summary>
        </member>
        <member name="M:Indigo.Library.GetFolders(System.String)">
            <summary>
            Gets an enumerable of folders, taking search paths into consideration. An Indigo-friendly alias for Directory.GetDirectories()
            </summary>
        </member>
        <member name="M:Indigo.Library.GetFilenames(System.String,System.String)">
            <summary>
            Gets an enumerable of files, taking search paths into consideration. An Indigo-friendly alias for Directory.GetFiles()
            </summary>
        </member>
        <member name="M:Indigo.Library.GetFilenames(System.String)">
            <summary>
            Gets an enumerable of files, taking search paths into consideration. An Indigo-friendly alias for Directory.GetFiles()
            </summary>
        </member>
        <member name="M:Indigo.Library.GetFilename(System.String)">
            <summary>
            Get a qualified filename, taking search paths into consideration.
            </summary>
            <param name="filename">The filename to qualify.</param>
        </member>
        <member name="M:Indigo.Library.GetFolderName(System.String)">
            <summary>
            Get a qualified folder name, taking search paths into consideration.
            </summary>
            <param name="folderName">The filename to qualify.</param>
        </member>
        <member name="M:Indigo.Library.FileExists(System.String)">
            <summary>
            Check if a file exists in any search path.
            </summary>
            <param name="path">Filename.</param>
            <returns>If the file exists.</returns>
        </member>
        <member name="M:Indigo.Library.FolderExists(System.String)">
            <summary>
            Check if a file exists in any search path.
            </summary>
            <param name="path">Filename.</param>
            <returns>If the file exists.</returns>
        </member>
        <member name="M:Indigo.Library.Unload">
            <summary>
            Releases all cached assets.
            No memory disposal is done immediately.
            </summary>
        </member>
        <member name="M:Indigo.Library.Reload">
            <summary>
            <para>Reloads all loaded assets.</para>
            <para>Textures' contents will be updated from disk.</para>
            </summary>
        </member>
        <member name="P:Indigo.Debugging.DebugConsole.IsOpen">
            <summary>
            Whether the console is expanded.
            </summary>
        </member>
        <member name="P:Indigo.Debugging.DebugConsole.Enabled">
            <summary>
            Whether the console has been enabled.
            </summary>
        </member>
        <member name="M:Indigo.Debugging.DebugConsole.Break">
            <summary>
            Quickly open the console. Acts like a breakpoint.
            </summary>
        </member>
        <member name="M:Indigo.Debugging.DebugConsole.ToggleVisibility">
            <summary>
            If the console is closed, open it, and vice-versa.
            </summary>
        </member>
        <member name="M:Indigo.Debugging.DebugConsole.Write(System.Object[])">
            <summary>
            Output text to the console.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Indigo.Debugging.DebugConsole.Enable">
            <summary>
            Set the console to display and update.
            </summary>
        </member>
        <member name="P:Indigo.Debugging.DebugConsole.Paused">
            <summary>
            If the Console is currently in paused mode.
            </summary>
        </member>
        <member name="F:Indigo.Debugging.DebugConsole.InvisibleUntilOpen">
            <summary>
            Whether the top bar of the console will display when the console is closed.
            </summary>
        </member>
        <member name="F:Indigo.Debugging.DebugConsole.DisplayCallingMethod">
            <summary>
            Whether the method calling Log() should be displayed before the message.
            </summary>
        </member>
        <member name="T:Indigo.Engine">
            <summary>
            Main game class. Manages the game loop.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Width">
            <summary>
            Width of the game.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Height">
            <summary>
            Height of the game.
            </summary>
        </member>
        <member name="P:Indigo.Engine.HalfWidth">
            <summary>
            Half width of the game.
            </summary>
        </member>
        <member name="P:Indigo.Engine.HalfHeight">
            <summary>
            Half height of the game.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Framerate">
            <summary>
            The assigned framerate
            </summary>
        </member>
        <member name="P:Indigo.Engine.Interval">
            <summary>
            The ideal interval (in fractional seconds) between frames.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Fixed">
            <summary>
            If the game is running at a fixed framerate.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Timescale">
            <summary>
            Timescale assigned to Elapsed.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Screen">
            <summary>
            The display window.
            </summary>
        </member>
        <member name="P:Indigo.Engine.GlobalKeys">
            <summary>
            Global keys. Allows setting callbacks that will trigger regardless of world or debug state.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Focused">
            <summary>
            If the game currently has input focus or not.
            </summary>
        </member>
        <member name="P:Indigo.Engine.World">
            <summary>
            The currently active World.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Choose">
            <summary>
            A collection of functions to choose from lists, options, enums, etc.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Random">
            <summary>
            A collection of functions to create pseudo-random values.
            </summary>
        </member>
        <member name="F:Indigo.Engine.Paused">
            <summary>
            If the game should stop updating/rendering.
            </summary>
        </member>
        <member name="F:Indigo.Engine.Running">
            <summary>
            Whether the program is running.
            </summary>
        </member>
        <member name="F:Indigo.Engine.MaxElapsed">
            <summary>
            Cap on the elapsed time (default at 30 FPS). Raise this to allow for lower framerates (eg. 1 / 10).
            </summary>
        </member>
        <member name="F:Indigo.Engine.MaxFrameSkip">
            <summary>
            The max amount of frames that can be skipped in fixed framerate mode.
            </summary>
        </member>
        <member name="F:Indigo.Engine.SkipRate">
            <summary>
            The amount of milliseconds between ticks in fixed framerate mode.
            </summary>
        </member>
        <member name="E:Indigo.Engine.OnQuit">
            <summary>
            Called when the engine shuts down.
            </summary>
        </member>
        <member name="P:Indigo.Engine.Tweener">
            <summary>
            Global Tweener for tweening values across multiple worlds.
            </summary>
        </member>
        <member name="M:Indigo.Engine.GetTimer">
            <summary>
            High-resolution timer.
            </summary>
            <returns>Milliseconds since the Engine started up.</returns>
        </member>
        <member name="F:Indigo.Engine.Timer">
            <summary>
            Time since the game started
            </summary>
        </member>
        <member name="M:Indigo.Engine.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Engine constructor
            </summary>
            <param name="width">The width of your game.</param>
            <param name="height">The height of your game.</param>
            <param name="framerate">The game framerate, in frames per second (default 60).</param>
        </member>
        <member name="M:Indigo.Engine.FocusGained">
            <summary>
            Override this; called when the window gains focus.
            </summary>
        </member>
        <member name="M:Indigo.Engine.FocusLost">
            <summary>
            Override this; called when the window loses focus.
            </summary>
        </member>
        <member name="M:Indigo.Engine.Update(Indigo.GameTime)">
            <summary>
            Updates the engine.
            </summary>
        </member>
        <member name="T:Indigo.Entity">
            <summary>
            Main game Entity class updated by World.
            </summary>
        </member>
        <member name="F:Indigo.Entity.Visible">
            <summary>
            If the Entity should render.
            </summary>
        </member>
        <member name="F:Indigo.Entity.Active">
            <summary>
            If the Entity should update.
            </summary>
        </member>
        <member name="F:Indigo.Entity.Collidable">
            <summary>
            If the Entity should respond to collision checks.
            </summary>
        </member>
        <member name="F:Indigo.Entity.X">
            <summary>
            X position of the Entity in the World. 
            </summary>
        </member>
        <member name="F:Indigo.Entity.Y">
            <summary>
            Y position of the Entity in the World. 
            </summary>
        </member>
        <member name="P:Indigo.Entity.Tweener">
            <summary>
            The Glide tweener managed by this Entity.
            </summary>
        </member>
        <member name="M:Indigo.Entity.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Indigo.Entity.#ctor(System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X position to place the Entity (default 0).</param>
            <param name="y">Y position to place the Entity (default 0).</param>
        </member>
        <member name="M:Indigo.Entity.#ctor(System.Single,System.Single,Indigo.Component[])">
            <summary>
            Constructor.
            </summary>
            <param name="x">X position to place the Entity (default 0).</param>
            <param name="y">Y position to place the Entity (default 0).</param>
            <param name="components">Optional list of components to add to the Entity.</param>
        </member>
        <member name="M:Indigo.Entity.Added">
            <summary>
            Override this, called when the Entity is added to a World.
            </summary>
        </member>
        <member name="M:Indigo.Entity.Removed">
            <summary>
            Override this, called when the Entity is removed from a World.
            </summary>
        </member>
        <member name="M:Indigo.Entity.Update(Indigo.GameTime)">
            <summary>
            Updates the Entity.
            </summary>
        </member>
        <member name="M:Indigo.Entity.Render">
            <summary>
            Renders the Entity. If you override this for special behaviour,
            remember to call base.render() to render the Entity's graphic.
            </summary>
        </member>
        <member name="M:Indigo.Entity.RenderDebug(Indigo.Debugging.DebugConsole)">
            <summary>
            Override this to render debug information in the debug console.
            </summary>
        </member>
        <member name="M:Indigo.Entity.AddComponent``1(``0)">
            <summary>
            Add a component and return it.
            </summary>
        </member>
        <member name="M:Indigo.Entity.RemoveComponent``1(``0)">
            <summary>
            Remove a component and return it.
            </summary>
        </member>
        <member name="M:Indigo.Entity.GetComponent(System.Type)">
            <summary>
            Get the first component of a given type.
            </summary>
        </member>
        <member name="M:Indigo.Entity.GetComponent``1">
            <summary>
            Get the first component of a given type.
            </summary>
        </member>
        <member name="M:Indigo.Entity.GetComponents(System.Type)">
            <summary>
            Get an enumerable containing all components of a given type.
            </summary>
        </member>
        <member name="M:Indigo.Entity.GetComponents``1">
            <summary>
            Get an array containing all components of a given type.
            </summary>
        </member>
        <member name="M:Indigo.Entity.GetDerivedComponents(System.Type)">
            <summary>
            Get an enumerable containing all components of a given type, including components derived from that type.
            </summary>
        </member>
        <member name="M:Indigo.Entity.GetDerivedComponents``1">
            <summary>
            Get an enumerable containing all components of a given type, including components derived from that type.
            </summary>
        </member>
        <member name="M:Indigo.Entity.ClampHorizontal(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the Entity's position on the x-axis.
            </summary>
            <param name="left">Left bounds.</param>
            <param name="right">Right bounds.</param>
            <param name="padding">Optional padding on the clamp.</param>
        </member>
        <member name="M:Indigo.Entity.ClampVertical(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the Entity's position on the y axis.
            </summary>
            <param name="top">Min bounds.</param>
            <param name="bottom">Max bounds.</param>
            <param name="padding">Optional padding on the clamp.</param>
        </member>
        <member name="P:Indigo.Entity.OnCamera">
            <summary>
            If the Entity's position is contained within the camera rectangle.
            </summary>
        </member>
        <member name="P:Indigo.Entity.World">
            <summary>
            The World object this Entity has been added to.
            </summary>
        </member>
        <member name="P:Indigo.Entity.RenderStep">
            <summary>
            <para>The order in which this Entity will be rendered by the World.</para>
            <para>Lower numbers will be rendered earlier than higher values, and appear below them.</para>
            </summary>
        </member>
        <member name="P:Indigo.Entity.UpdateStep">
            <summary>
            <para>The update step of this Entity.</para>
            <para>Lower numbers will be updated earlier than higher values.</para>
            </summary>
        </member>
        <member name="P:Indigo.Entity.Name">
            <summary>
            The Entity's instance name. Use this to uniquely identify single
            game Entities, which can then be looked-up with World.GetInstance().
            </summary>
        </member>
        <member name="T:Indigo.FP">
            <summary>
            Static catch-all class used to access global properties and functions.
            </summary>
        </member>
        <member name="M:Indigo.FP.AnchorTo(System.Single@,System.Single@,System.Single,System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Anchors the object to a position
            </summary>
            <param name="objX">X of the object to anchor</param>
            <param name="objY">Y of the object to anchor</param>
            <param name="anchorX">X of the anchor</param>
            <param name="anchorY">Y of the anchor</param>
            <param name="maxDistance">The max distance that the object can be from the anchor</param>
            <param name="minDistance">The minimum distance that the object can be from the anchor</param>
        </member>
        <member name="M:Indigo.FP.RotateAround(System.Single@,System.Single@,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Rotates the object around the anchor by the specified amount.
            </summary>
            <param name="objX">X position of the object to rotate around the anchor.</param>
            <param name="objY">Y position of the object to rotate around the anchor.</param>
            <param name="anchorX">X position of the anchor to rotate around.</param>
            <param name="anchorY">Y position of the anchor to rotate around.</param>
            <param name="angle">The amount of degrees to rotate by.</param>
            <param name="relative">Whether the rotation is relative (default true).</param>
        </member>
        <member name="M:Indigo.FP.Swap``1(``0,``0,``0)">
            <summary>
            Swaps the current item between a and b. Useful for quick state/string/value swapping.
            </summary>
            <param name="current">The currently selected item.</param>
            <param name="a">Item a</param>
            <param name="b">Item b</param>
            <returns>Returns a if current is b, and b if current is a.</returns>
        </member>
        <member name="M:Indigo.FP.MakeFrames(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets an array of frame indices.
            </summary>
            <param name="from">Starting frame.</param>
            <param name="to">Ending frame.</param>
            <param name="skip">Skip amount every frame (eg. use 1 for every 2nd frame).</param>
            <returns></returns>
        </member>
        <member name="M:Indigo.FP.Frames(System.Int32[])">
            <summary>
            Create a frame array.
            </summary>
            <param name="frames">The frames to insert into the array</param>
            <returns>The frame array.</returns>
        </member>
        <member name="T:Indigo.Graphics.AnimatedTilemap">
            <summary>
            Tilemap class which allows for animations.
            <remarks>Full credit to VoEC / Nicole Brauer for the original implementation</remarks>
            </summary>
        </member>
        <member name="F:Indigo.Graphics.AnimatedTilemap.Rate">
            <summary>Animation speed factor. Alter this to speed up/slow down all animations.</summary>
        </member>
        <member name="M:Indigo.Graphics.AnimatedTilemap.#ctor(Indigo.Content.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="tileset">The source tileset image</param>
            <param name="width">Width of the tilemap, in pixels.</param>
            <param name="height">Height of the tilemap, in pixels</param>
            <param name="tileWidth">Tile width</param>
            <param name="tileHeight">Tile height</param>
        </member>
        <member name="M:Indigo.Graphics.AnimatedTilemap.SetTile(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the index of the tile at the position.
            </summary>
            <param name="column">Tile column.</param>
            <param name="row">Tile row.</param>
            <param name="index">Tile index from the tileset to show. (Or -1 to show the tile as blank.)</param>
        </member>
        <member name="M:Indigo.Graphics.AnimatedTilemap.Animate(System.Int32[],System.Single)">
            <summary>
            Add an animation to tiles in the Tilemap.
            </summary>
            <param name="frames">Array of frame indices to animate through. The first frame should be the 1D index of the tile used when drawing the tilemap.</param>
            <param name="frameRate">Animation speed (in frames per second, 0 defaults to assigned frame rate)</param>
        </member>
        <member name="F:Indigo.Graphics.AnimatedTilemap._animations">
            <summary>
            Create an array to hold all the animations
            </summary>
        </member>
        <member name="T:Indigo.Graphics.AnimatedTilemap.Animation">
            <summary>
            Little helper class for defining animations.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Backdrop">
            <summary>
            <para>A background texture that can be repeated horizontally and vertically when drawn.</para>
            <para>Really useful for parallax backgrounds, textures, etc.</para>
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Backdrop.PageWidth">
            <summary>
            Size of a single repetition of the texture.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Backdrop.PageHeight">
            <summary>
            Size of a single repetition of the texture.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Backdrop.Scale">
            <summary>
            Scale of the texture page, affects both x and y scale.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Backdrop.ScaleX">
            <summary>
            X scale of the texture page.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Backdrop.ScaleY">
            <summary>
            Y scale of the texture page.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Emitter">
            <summary>
            Particle emitter used for emitting and rendering particle sprites.
            Good rendering performance with large amounts of particles.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Emitter.#ctor(Indigo.Content.Texture)">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source texture.</param>
        </member>
        <member name="M:Indigo.Graphics.Emitter.#ctor(Indigo.Content.Texture,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="source">Source texture.</param>
            <param name="frameWidth">Frame width.</param>
            <param name="frameHeight">Frame height.</param>
        </member>
        <member name="M:Indigo.Graphics.Emitter.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor. Create an emitter with no texture.
            </summary>
            <param name="particleWidth">Frame width.</param>
            <param name="particleHeight">Frame height.</param>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Define(System.String)">
            <summary>
            Define a new particle type.
            </summary>
            <param name="name">A unique name to look up the definition with later.</param>
            <returns>The newly created particle definition.</returns>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Define(System.Int32[])">
            <summary>
            Define a new particle type.
            </summary>
            <param name="frames">Animation frames.</param>
            <returns>The newly created particle definition.</returns>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Define(System.String,System.Int32[])">
            <summary>
            Define a new particle type.
            </summary>
            <param name="name">A unique name to look up the definition with later.</param>
            <param name="frames">Animation frames.</param>
            <returns>The newly created particle definition.</returns>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Lookup(System.String)">
            <summary>
            Find a particle definition by its name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Update(Indigo.GameTime)">
            <summary>
            Update the graphic.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Render(System.Single,System.Single,Indigo.Camera)">
            <summary>
            Renders the particles.
            </summary>
            <param name="x">X position of the owning entity.</param>
            <param name="y">Y position of the owning entity.</param>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Emit(Indigo.Graphics.ParticleDefinition,Indigo.Core.Point)">
            <summary>
            Emits a particle.
            </summary>
            <param name="type">The particle type to emit</param>
            <param name="position">Point to emit from.</param>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Emit(Indigo.Graphics.ParticleDefinition,System.Single,System.Single)">
            <summary>
            Emits a particle.
            </summary>
            <param name="type">The particle type to emit</param>
            <param name="x">X point to emit from.</param>
            <param name="y">Y point to emit from.</param>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Emit(System.String,System.Single,System.Single)">
            <summary>
            Emits a particle.
            </summary>
            <param name="particleTypeName">The name of the particle type to emit</param>
            <param name="x">X point to emit from.</param>
            <param name="y">Y point to emit from.</param>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Emit(System.String,Indigo.Core.Point)">
            <summary>
            Emits a particle.
            </summary>
            <param name="particleTypeName">The name of the particle type to emit</param>
            <param name="position">Point to emit from.</param>
        </member>
        <member name="M:Indigo.Graphics.Emitter.Simulate(System.Single)">
            <summary>
            <para>Simulate the emitter running for a given amount of time.</para>
            </summary>
            <param name="time">The time to run for, in seconds or frames depending on Engine timestep mode.</param>
        </member>
        <member name="P:Indigo.Graphics.Emitter.ParticleCount">
            <summary>
            Amount of currently existing particles.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Graphic">
            <summary>
            Base class for all graphical types that can be drawn by Entity.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Graphic.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Graphic.Visible">
            <summary>
            Whether this component should be rendered.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Graphic.X">
            <summary>
            X offset.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Graphic.Y">
            <summary>
            Y offset.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Graphic.ScrollX">
            <summary>
            X scrollfactor, effects how much the camera offsets the drawn graphic.
            Can be used for parallax effect, eg. Set to 0 to follow the camera,
            0.5 to move at half-speed of the camera, or 1 (default) to stay still.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Graphic.ScrollY">
            <summary>
            Y scrollfactor, effects how much the camera offsets the drawn graphic.
            Can be used for parallax effect, eg. Set to 0 to follow the camera,
            0.5 to move at half-speed of the camera, or 1 (default) to stay still.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Graphic.Relative">
            <summary>
            If the graphic should render at its position relative to its parent Entity's position.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Graphic.Shader">
            <summary>
            An optional shader to draw the image with
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Graphic.RenderStep">
            <summary>
            <para>The order in which this Graphic will be rendered by its Entity.</para>
            <para>Lower numbers will be rendered earlier than higher values, and appear below them.</para>
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Graphic.Render(System.Single,System.Single,Indigo.Camera)">
            <summary>
            Override this.
            Used to draw the Graphic.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Graphiclist">
            <summary>
            A Graphic that can contain multiple Graphics of one or various types.
            Useful for drawing sprites with multiple different parts, etc.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.#ctor(Indigo.Graphics.Graphic[])">
            <summary>
            Constructor
            </summary>
            <param name="graphics">Graphic objects to add to the list.</param>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.Update(Indigo.GameTime)">
            <summary>
            Updates the graphics in the list.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.First``1">
            <summary>
            Get the first graphic of a type.
            </summary>
            <returns>The first graphic found, or null if none exist.</returns>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.Render(System.Single,System.Single,Indigo.Camera)">
            <summary>
            Render the Graphic.
            </summary>
            <param name="x">X position of the owning Entity.</param>
            <param name="y">Y position of the owning Entity.</param>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.Add``1(``0)">
            <summary>
            Adds the Graphic to the list.
            </summary>
            <param name="graphic">The Graphic to add.</param>
            <returns>The added Graphic.</returns>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.Remove``1(``0)">
            <summary>
            Removes the Graphic from the list.
            </summary>
            <param name="graphic">The Graphic to remove.</param>
            <returns>The removed Graphic.</returns>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.RemoveAt(System.Int32)">
            <summary>
            Removes the Graphic from the position in the list.
            </summary>
            <param name="index">Index to remove.</param>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.RemoveAll">
            <summary>
            Removes all Graphics from the list.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Graphiclist.Count">
            <summary>
            Amount of Graphics in this list.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Graphiclist.UpdateCheck">
            <summary>
            Check if the Graphiclist should update.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Image">
            <summary>
            Non-animated image. Can be drawn to the screen with transformations.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.Angle">
            <summary>
            Rotation of the image, in degrees.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.Scale">
            <summary>
            Scale of the image, affects both x and y scale.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.ScaleX">
            <summary>
            X scale of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.ScaleY">
            <summary>
            Y scale of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.OriginX">
            <summary>
            X origin of the image, determines transformation point.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.OriginY">
            <summary>
            Y origin of the image, determines transformation point.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.FlippedX">
            <summary>
            If you want to draw the image horizontally flipped.
            This will flip the texture without moving it, as would happen if you set ScaleX to -1.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.FlippedY">
            <summary>
            If you want to draw the image vertically flipped.
            This will flip the texture without moving it, as would happen if you set ScaleY to -1.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Image.UpdateTextureRect">
            <summary>
            Updates the texture rectangle.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.Width">
            <summary>
            The width of the image
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.Height">
            <summary>
            The height of the image
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.ScaledWidth">
            <summary>
            The scaled width of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.ScaledHeight">
            <summary>
            The scaled height of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.ClipRect">
            <summary>
            Clipping rectangle for the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.Source">
            <summary>
            The texture that the image uses (null if in Shape mode).
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.Alpha">
            <summary>
            The alpha of the image
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Image.Color">
            <summary>
            Set the tint color of the image. Setting this to White (255, 255, 255 or 0xffffff) will disable tinting.
            If you set the alpha of this property, it will be overwritten by the Alpha property when the color transform is updated.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Image.#ctor(Indigo.Content.Texture,System.Nullable{Indigo.Core.Rectangle})">
            <summary>
            Constructor.
            </summary>
            <param name="texture">Source image.</param>
            <param name="clipRect">Optional rectangle defining area of the source image to draw.</param>
        </member>
        <member name="M:Indigo.Graphics.Image.CreateRect(System.Int32,System.Int32,Indigo.Graphics.Color)">
            <summary>
            Create a solid-color rectangle image.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="color">The color of the image.</param>
            <returns>The created image.</returns>
        </member>
        <member name="M:Indigo.Graphics.Image.CreateCircle(System.Int32,Indigo.Graphics.Color)">
            <summary>
            Create a solid-color circle image.
            </summary>
            <param name="radius">The radius of the image.</param>
            <param name="color">The color of the image.</param>
            <returns>The created image.</returns>
        </member>
        <member name="M:Indigo.Graphics.Image.Render(System.Single,System.Single,Indigo.Camera)">
            <summary>
            Renders the graphic to the screen buffer.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Image.CenterOrigin">
            <summary>
            Centers the Image's originX/Y to its center.
            </summary>		
        </member>
        <member name="F:Indigo.Graphics.Image._sourceRectSize">
            <summary>
            The size of the clipping rectangle, used for accurate flipping.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Image._sourceRect">
            <summary>
            The size of the clipping rectangle, used for accurate flipping.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Image._alpha">
            <summary>
            The transparency of the image
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Image._color">
            <summary>
            The tint color of the image.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Image._flipX">
            <summary>
            Whether the image is flipped on the X axis.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Image._flipY">
            <summary>
            Whether the image is flipped on the Y axis.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Lines">
            <summary>
            Utility class for drawing screen-coordinate vertices.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Lines.Line(System.Single,System.Single,System.Single,System.Single,Indigo.Graphics.Color,System.Single)">
            <summary>
            Draws a line.
            </summary>
            <param name="x1">Starting x position.</param>
            <param name="y1">Starting y position.</param>
            <param name="x2">Ending x position.</param>
            <param name="y2">Ending y position.</param>
            <param name="color">Color of the line.</param>
            <param name="alpha">Alpha of the line. Defaults to 1</param>
        </member>
        <member name="T:Indigo.Graphics.Nineslice">
            <summary>
            A box that automatically repeats portions of its source texture to create a seamlessly tiled image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.Angle">
            <summary>
            Rotation of the image, in degrees.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.Scale">
            <summary>
            Scale of the image, affects both x and y scale.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.ScaleX">
            <summary>
            X scale of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.ScaleY">
            <summary>
            Y scale of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.OriginX">
            <summary>
            X origin of the image, determines transformation point.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.OriginY">
            <summary>
            Y origin of the image, determines transformation point.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.Columns">
            <summary>
            How many columns to render
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.Rows">
            <summary>
            How many rows to render
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.Width">
            <summary>
            The width of the graphic
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.Height">
            <summary>
            The height of the graphic
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.ScaledWidth">
            <summary>
            The scaled width of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.ScaledHeight">
            <summary>
            The scaled height of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.Alpha">
            <summary>
            The alpha of the image
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Nineslice.Color">
            <summary>
            Set the tint color of the image. Setting this to White (255, 255, 255 or 0xffffff) will disable tinting.
            If you set the alpha of this property, it will be overwritten by the Alpha property when the color transform is updated.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Nineslice.#ctor(Indigo.Content.Texture,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The source texture. Should be divisible by three in both directions.</param>
            <param name="columns">How many columns wide the graphic is.</param>
            <param name="rows">How many rows high the graphic is.</param>
        </member>
        <member name="M:Indigo.Graphics.Nineslice.Render(System.Single,System.Single,Indigo.Camera)">
            <summary>
            Renders the graphic.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="camera"></param>
        </member>
        <member name="M:Indigo.Graphics.Nineslice.BuildCornerTopLeft(SFML.Window.Vector2f[])">
             All vertices are wound clockwise beginning at the top-left corner.
             Slices correspond to array indices thusly:
             0, 1, 2
             3, 4, 5
             6, 7, 8
            
        </member>
        <member name="F:Indigo.Graphics.Nineslice.StretchCenter">
            <summary>
            Whether the texture should be stretched instead of repeating.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Nineslice.StretchTop">
            <summary>
            Whether the texture should be stretched instead of repeating.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Nineslice.StretchLeft">
            <summary>
            Whether the texture should be stretched instead of repeating.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Nineslice.StretchBottom">
            <summary>
            Whether the texture should be stretched instead of repeating.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Nineslice.StretchRight">
            <summary>
            Whether the texture should be stretched instead of repeating.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.ParticleDefinition.VectorField">
            <summary>
            Optional vector field component that influences particle motion.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Spritemap">
            <summary>
            Animated Image. Can have multiple animations,
            which draw frames from the provided source image to the screen.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Spritemap.OnComplete">
            <summary>
            Callback type for when animations complete.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Spritemap.Complete">
            <summary>
            If the animation has stopped.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Spritemap.Callback">
            <summary>
            Optional callback function for animation end.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Spritemap.Rate">
            <summary>
            Animation speed factor, alter this to speed up/slow down all animations.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Spritemap.#ctor(Indigo.Content.Texture,System.Int32,System.Int32,Indigo.Graphics.Spritemap.OnComplete)">
            <summary>
            Constructor
            </summary>
            <param name="texture">Source image.</param>
            <param name="frameWidth">Frame width.</param>
            <param name="frameHeight">Frame height.</param>
            <param name="complete">Optional callback function for animation end.</param>
        </member>
        <member name="M:Indigo.Graphics.Spritemap.UpdateBuffer">
            <summary>
            Updates the spritemap's buffer.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Spritemap.Update(Indigo.GameTime)">
            <summary>
            Updates the animation.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Spritemap.Add(System.String,System.Int32[],System.Single,System.Boolean)">
            <summary>
            Add an Animation.
            </summary>
            <param name="name">Name of the animation.</param>
            <param name="frames">Array of frame indices to animate through.</param>
            <param name="frameRate">Animation speed.</param>
            <param name="loop">If the animation should loop.</param>
            <returns>A new Anim object for the animation.</returns>
        </member>
        <member name="M:Indigo.Graphics.Spritemap.Play(System.String,System.Boolean,System.Int32)">
            <summary>
            Plays an animation.
            </summary>
            <param name="name">Name of the animation to play.</param>
            <param name="reset">If the animation should force-restart if it is already playing.</param>
            <param name="frame">Frame of the animation to start from, if restarted.</param>
            <returns>Anim object representing the played animation.</returns>
        </member>
        <member name="M:Indigo.Graphics.Spritemap.GetFrame(System.Int32,System.Int32)">
            <summary>
            Gets the frame index based on the column and row of the source image.
            </summary>
            <param name="column">Frame column.</param>
            <param name="row">Frame row.</param>
            <returns>Frame index.</returns>
        </member>
        <member name="M:Indigo.Graphics.Spritemap.SetFrame(System.Int32,System.Int32)">
            <summary>
            Sets the current display frame based on the column and row of the source image.
            When you set the frame, any animations playing will be stopped to force the frame.
            </summary>
            <param name="column">Frame column.</param>
            <param name="row">Frame row.</param>
        </member>
        <member name="M:Indigo.Graphics.Spritemap.SetAnimFrame(System.String,System.Int32)">
            <summary>
            Sets the frame to the frame index of an animation.
            </summary>
            <param name="name">Animation to draw the frame frame.</param>
            <param name="index">Index of the frame of the animation to set to.</param>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Frame">
            <summary>
            The current frame index. When you set this, any
            animations playing will be stopped to force the frame.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Index">
            <summary>
            Current index of the playing animation.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.FrameCount">
            <summary>
            The amount of frames in the Spritemap.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Columns">
            <summary>
            Columns in the Spritemap.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Rows">
            <summary>
            Rows in the Spritemap.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.CurrentAnim">
            <summary>
            The currently playing animation.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Spritemap._width">
            <summary>
            The width of the Spritemap.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Spritemap._height">
            <summary>
            The height of the Spritemap.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Spritemap._frame">
            <summary>
            The current animation frame.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Spritemap.Anim">
            <summary>
            Template used by Spritemap to define animations. 
            Don't create these yourself, instead you can fetch them with Spritemap's Add().
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Anim.Name">
            <summary>
            The name of the animation
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Anim.Frames">
            <summary>
            Array of frame indices to animate.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Anim.FrameRate">
            <summary>
            Animation speed.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Anim.Loop">
            <summary>
            If the animation loops.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Spritemap.Anim.FrameCount">
            <summary>
            Amount of frames in the animation.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.TessellatedSprite">
            <summary>
            Description of TessellatedSprite.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.TessellatedSprite.Angle">
            <summary>
            Rotation of the image, in degrees.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.TessellatedSprite.Scale">
            <summary>
            Scale of the image, affects both x and y scale.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.TessellatedSprite.ScaleX">
            <summary>
            X scale of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.TessellatedSprite.ScaleY">
            <summary>
            Y scale of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.TessellatedSprite.OriginX">
            <summary>
            X origin of the image, determines transformation point.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.TessellatedSprite.OriginY">
            <summary>
            Y origin of the image, determines transformation point.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.TessellatedSprite.#ctor(Indigo.Content.Texture,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="texture">Source texture.</param>
            <param name="resX">How many pixels wide the tessellation triangles are.</param>
            <param name="resY">How many pixels high the tessellation triangles are.</param>
        </member>
        <member name="T:Indigo.Graphics.Text">
            <summary>
            Used for drawing text using embedded fonts.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Angle">
            <summary>
            Rotation of the image, in degrees.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Scale">
            <summary>
            Scale of the image, affects both x and y scale.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.ScaleX">
            <summary>
            X scale of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.ScaleY">
            <summary>
            Y scale of the image.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.OriginX">
            <summary>
            X origin of the image, determines transformation point.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.OriginY">
            <summary>
            Y origin of the image, determines transformation point.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Text.Styles">
            <summary>
            Text style types.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Text.DefaultFont">
            <summary>
            The font to assign to new Text objects.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Text.DefaultSize">
            <summary>
            The font size to assign to new Text objects.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Text.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text to display</param>
            <param name="x">X offset</param>
            <param name="y">Y offset</param>
        </member>
        <member name="M:Indigo.Graphics.Text.CenterOrigin">
            <summary>
            Centers the Text's originX/Y to its center.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Bold">
            <summary>
            If the text is bolded.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Italicized">
            <summary>
            If the text is italicized.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Underlined">
            <summary>
            If the text is underlined.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Color">
            <summary>
            Set the tint color of the image. Setting this to White (255, 255, 255 or 0xffffff) will disable tinting.
            If you set the alpha of this property, it will be overwritten by the Alpha property when the color transform is updated.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.String">
            <summary>
            Text string.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Font">
            <summary>
            Font family.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Size">
            <summary>
            Font size.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Width">
            <summary>
            Width of the text.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Text.Height">
            <summary>
            Height of the text.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.Tilemap">
            <summary>
            Batched tile rendering.
            </summary>
        </member>
        <member name="F:Indigo.Graphics.Tilemap.UsePositions">
            <summary>
            If x/y positions should be used instead of columns/rows.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.#ctor(Indigo.Content.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="tileset">The source tileset texture.</param>
            <param name="width">Width of the tilemap graphic, in pixels.</param>
            <param name="height">Height of the tilemap graphic, in pixels.</param>
            <param name="tileWidth">Tile width.</param>
            <param name="tileHeight">Tile height.</param>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.CopyTo(Indigo.Graphics.Tilemap)">
            <summary>
            Copy the tiles from this tilemap to another.
            </summary>
            <param name="other">The tilemap that will have its tiles set to match this.</param>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.SetTile(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the tile at the position.
            </summary>
            <param name="column">Column of the tile.</param>
            <param name="row">Column of the tile.</param>
            <param name="index">The tile index.</param>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.ClearTile(System.Int32,System.Int32)">
            <summary>
            Clears the tile at the position.
            </summary>
            <param name="column">Column of the tile.</param>
            <param name="row">Column of the tile.</param>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.CheckTile(System.Int32,System.Int32)">
            <summary>
            Check that the tile is valid.
            </summary>
            <param name="column">Tile column.</param>
            <param name="row">Tile row.</param>
            <returns>If the tile is valid.</returns>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.GetTile(System.Int32,System.Int32)">
            <summary>
            Get the index of a tile at the position.
            </summary>
            <param name="column">Column of the tile.</param>
            <param name="row">Column of the tile.</param>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.SetRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills the rectangular region with tiles.
            </summary>
            <param name="column">First tile column.</param>
            <param name="row">First tile row.</param>
            <param name="width">Width in tiles.</param>
            <param name="height">Height in tiles.</param>
            <param name="index">Index of the tile.</param>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.ClearRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears the rectangular region of tiles.
            </summary>
            <param name="column">First tile column.</param>
            <param name="row">First tile row.</param>
            <param name="width">Width in tiles.</param>
            <param name="height">Height in tiles.</param>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.LoadFromString(System.String,System.String,System.String)">
            <summary>
            Loads the Tilemap tile index data from a string.
            The implicit array should not be bigger than the Tilemap.
            </summary>
            <param name="str">The string data, which is a set of tile values separated by the columnSep and rowSep strings.</param>
            <param name="columnSep">The string that separates each tile value on a row, default is ",".</param>
            <param name="rowSep">The string that separates each row of tiles, default is "\n".</param>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.SaveToString(System.String,System.String)">
            <summary>
            Saves the Tilemap tile index data to a string.
            </summary>
            <param name="columnSep">The string that separates each tile value on a row, default is ",".</param>
            <param name="rowSep">The string that separates each row of tiles, default is "\n".</param>
            <returns>The string version of the array.</returns>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.CreateGrid(System.Int32[])">
            <summary>
            Create a grid based on this tilemap.
            </summary>
            <param name="solidTiles">The tile indeces to be treated as solid.</param>
            <returns></returns>
        </member>
        <member name="M:Indigo.Graphics.Tilemap.GetIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index of a tile, based on its column and row in the tileset.
            </summary>
            <param name="tilesColumn">Tileset column.</param>
            <param name="tilesRow">Tileset row.</param>
            <returns>Index of the tile.</returns>
        </member>
        <member name="P:Indigo.Graphics.Tilemap.Width">
            <summary>
            Width of the graphic.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Tilemap.Height">
            <summary>
            Height of the graphic.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Tilemap.TileWidth">
            <summary>
            The tile width.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Tilemap.TileHeight">
            <summary>
            The tile height.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Tilemap.TileCount">
            <summary>
            How many tiles the tilemap has.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Tilemap.Columns">
            <summary>
            How many columns the tilemap has.
            </summary>
        </member>
        <member name="P:Indigo.Graphics.Tilemap.Rows">
            <summary>
            How many rows the tilemap has.
            </summary>
        </member>
        <member name="T:Indigo.Graphics.VertexArray">
            <summary>
            Wrapper for SFML's VertexArray.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.VertexArray.Clear">
            <summary>
            Clears all Verts from the Vertices.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.VertexArray.Add(System.Single,System.Single,Indigo.Graphics.Color,System.Single,System.Single)">
            <summary>
            Add a Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="color">The Color.</param>
            <param name="u">The X position on the Texture.</param>
            <param name="v">The Y position on the Texture.</param>
        </member>
        <member name="M:Indigo.Graphics.VertexArray.Add(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Add a Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="u">The X position on the Texture.</param>
            <param name="v">The Y position on the Texture.</param>
        </member>
        <member name="M:Indigo.Graphics.VertexArray.Add(System.Single,System.Single,Indigo.Graphics.Color)">
            <summary>
            Add a Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="color">The Color.</param>
        </member>
        <member name="M:Indigo.Graphics.VertexArray.Add(System.Single,System.Single)">
            <summary>
            Add a Vert.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
        </member>
        <member name="M:Indigo.Graphics.VertexArray.Add(Indigo.Graphics.VertexArray.Vertex[])">
            <summary>
            Add a set of vertices.
            </summary>
            <param name="vertices">The vertices to add.</param>
        </member>
        <member name="T:Indigo.Graphics.Color">
            <summary>
            Color struct.
            </summary>
        </member>
        <member name="M:Indigo.Graphics.Color.GetRed(System.Int32)">
            <summary>
            Finds the red factor of a color.
            </summary>
            <param name="color">The color to evaluate.</param>
            <returns>A int from 0 to 255.</returns>
        </member>
        <member name="M:Indigo.Graphics.Color.GetGreen(System.Int32)">
            <summary>
            Finds the green factor of a color.
            </summary>
            <param name="color">The color to evaluate.</param>
            <returns>An int from 0 to 255.</returns>
        </member>
        <member name="M:Indigo.Graphics.Color.GetBlue(System.Int32)">
            <summary>
            Finds the blue factor of a color.
            </summary>
            <param name="color">The color to evaluate.</param>
            <returns>An int from 0 to 255.</returns>
        </member>
        <member name="M:Indigo.Graphics.Color.ToHex(Indigo.Graphics.Color)">
            <summary>
            Create a Flash-style color (0xRRGGBB) from a Color instance.
            </summary>
            <param name="color">A Color instance.</param>
            <returns>The converted color.</returns>
        </member>
        <member name="M:Indigo.Graphics.Color.FromHSV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a color value with the chosen HSV values.
            </summary>
            <param name="hue">The hue of the color (from 0 to 360).</param>
            <param name="saturation">The saturation of the color (from 0 to 100).</param>
            <param name="value">The value of the color (from 0 to 100).</param>
            <returns>The created color.</returns>
        </member>
        <member name="T:Indigo.Inputs.Axis">
            <summary>
            Helper class for controllers. Represents the state of one axis of movement.
            </summary>
        </member>
        <member name="M:Indigo.Inputs.Directional.WSAD">
            <summary> Shortcut for creating a Directional with the W, S, A, and D keys. </summary>
        </member>
        <member name="M:Indigo.Inputs.Directional.ArrowKeys">
            <summary> Shortcut for creating a Directional with the Up, Down, Left, and Right keys. </summary>
        </member>
        <member name="M:Indigo.Inputs.Directional.#ctor(Indigo.Inputs.Input,Indigo.Inputs.Input,Indigo.Inputs.Input,Indigo.Inputs.Input)">
            <summary>
            Constructor.
            Get directional input from four inputs.
            </summary>
            <param name="up">The input to use for Up.</param>
            <param name="down">The input to use for Down.</param>
            <param name="left">The input to use for Left.</param>
            <param name="right">The input to use for Right.</param>
        </member>
        <member name="M:Indigo.Inputs.Directional.#ctor(Indigo.Inputs.Axis,Indigo.Inputs.Axis)">
            <summary>
            Constructor.
            Get input from a pair of axes, for use with a thumbstick.
            A directional in this mode will not update automatically!
            It must be attacked to a Gamepad or joystick.
            </summary>
            <param name="y">The axis to set the X value.</param>
            <param name="x">The axis to set the Y value.</param>
        </member>
        <member name="M:Indigo.Inputs.Directional.#ctor(Indigo.Inputs.JoystickHat)">
            <summary>
            Constructor.
            Get input from a hat, for use with a dpad.
            A directional in this mode will not update automatically!
            It must be attacked to a Gamepad or joystick.
            </summary>
            <param name="hat">The hat (on a joystick or Gamepad) with which to set the values of this object.</param>
        </member>
        <member name="F:Indigo.Inputs.Directional.FlipX">
            <summary>
            Whether the value of the axis should be flipped.
            Useful for gamepad axes that don't face the right way by default.
            </summary>
        </member>
        <member name="F:Indigo.Inputs.Directional.FlipY">
            <summary>
            Whether the value of the axis should be flipped.
            Useful for gamepad axes that don't face the right way by default.
            </summary>
        </member>
        <member name="T:Indigo.Inputs.Gamepad.JoystickAxis">
            <summary> Alias for axes to hopefully be backend-agnostic.</summary>
        </member>
        <member name="T:Indigo.Inputs.Gamepad.JoystickHat">
            <summary> Alias for hats to hopefully be backend-agnostic.</summary>
        </member>
        <member name="P:Indigo.Inputs.Gamepad.Trigger.Value">
            <summary>
            The state of the trigger, from 0 (fully relaxed) to 1 (fully pressed).
            </summary>
        </member>
        <member name="F:Indigo.Inputs.Gamepad.Trigger.Threshold">
            <summary>
            The minimum value the trigger can hold before it counts as Pressed, and the maximum before it counts as Released.
            </summary>
        </member>
        <member name="T:Indigo.Inputs.Keyboard">
            <summary>
            Access the state of keyboard keys.
            </summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.KeyString">
            <summary>
            An updated string containing the last 100 characters pressed on the keyboard.
            Useful for creating text input fields, such as highscore entries, etc.
            </summary>
        </member>
        <member name="P:Indigo.Inputs.Keyboard.Any">
            <summary>
            The "Any" key is set when any key on the keyboard is pressed, but only if its state is set to Up.
            Once the Any key is pressed, it will not be set again until its state is set to Up again.
            </summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.A">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.B">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.C">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.D">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.E">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.G">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.H">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.I">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.J">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.K">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.L">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.M">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.N">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.O">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.P">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Q">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.R">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.S">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.T">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.U">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.V">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.W">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.X">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Y">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Z">
            <summary>Alphabet keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num0">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num1">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num2">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num3">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num4">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num5">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num6">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num7">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num8">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Num9">
            <summary>Number keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad0">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad1">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad2">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad3">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad4">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad5">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad6">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad7">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad8">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Keypad9">
            <summary>Number pad keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.LControl">
            <summary>Modifier keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.LShift">
            <summary>Modifier keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.LAlt">
            <summary>Modifier keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.LSystem">
            <summary>Modifier keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.RControl">
            <summary>Modifier keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.RShift">
            <summary>Modifier keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.RAlt">
            <summary>Modifier keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.RSystem">
            <summary>Modifier keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Left">
            <summary>Arrow keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Right">
            <summary>Arrow keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Up">
            <summary>Arrow keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.Down">
            <summary>Arrow keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F1">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F2">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F3">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F4">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F5">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F6">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F7">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F8">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F9">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F10">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F11">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F12">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F13">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F14">
            <summary>Function keys.</summary>
        </member>
        <member name="F:Indigo.Inputs.Keyboard.F15">
            <summary>Function keys.</summary>
        </member>
        <member name="P:Indigo.Inputs.Mouse.ScreenX">
            <summary> X position of the mouse on the screen. </summary>
        </member>
        <member name="P:Indigo.Inputs.Mouse.ScreenY">
            <summary> Y position of the mouse on the screen.</summary>
        </member>
        <member name="P:Indigo.Inputs.Mouse.DeltaX">
            <summary> Difference between the last position of the mouse and its current position. </summary>
        </member>
        <member name="P:Indigo.Inputs.Mouse.DeltaY">
            <summary> Difference between the last position of the mouse and its current position. </summary>
        </member>
        <member name="P:Indigo.Inputs.Mouse.WheelDelta">
            <summary>
            If the mouse wheel was moved this frame, this was the delta.
            </summary>
        </member>
        <member name="P:Indigo.Inputs.Mouse.WheelMoved">
            <summary>
            If the mouse wheel was moved this frame.
            </summary>
        </member>
        <member name="T:Indigo.Loaders.AutoTileSet">
            <summary>
            Loader for tilesets created with Javi Cepa's AutoTileGen.
            </summary>
        </member>
        <member name="P:Indigo.Loaders.AutoTileSet.Grid">
            <summary>
            The grid used to set the tiles in the tilemap.
            </summary>
        </member>
        <member name="P:Indigo.Loaders.AutoTileSet.Tilemap">
            <summary>
            The tilemap.
            </summary>
        </member>
        <member name="M:Indigo.Loaders.AutoTileSet.#ctor(Indigo.Graphics.Tilemap,Indigo.Utils.IGrid{System.Boolean},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="tilemap">The tilemap to set tiles in.</param>
            <param name="grid">The grid to get tile data from.</param>
            <param name="setImmediately">Whether the tilemap should be filled in immediately.</param>
        </member>
        <member name="M:Indigo.Loaders.AutoTileSet.Refresh">
            <summary>
            Rebuild the tilemap with data from the Grid.
            </summary>
        </member>
        <member name="M:Indigo.Loaders.AutoTileSet.RefreshTile(System.Int32,System.Int32)">
            <summary>
            Rebuild the given tile and the eight tiles surrounding it.
            </summary>
            <param name="column">The column of tile to rebuild.</param>
            <param name="row">The row of the tile to rebuild.</param>
        </member>
        <member name="M:Indigo.Loaders.AutoTileSet.CreateFromGrid(Indigo.Graphics.Tilemap,Indigo.Utils.IGrid{System.Boolean})">
            <summary>
            Set every tile in the tilemap based on a collision grid
            </summary>
            <param name="map">The tilemap to set tiles in.</param>
            <param name="grid">The grid to get tile data from.</param>
        </member>
        <member name="M:Indigo.Loaders.AutoTileSet.SetTile(Indigo.Graphics.Tilemap,Indigo.Utils.IGrid{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Set a single tile in a tilemap based on a collision grid.
            </summary>
            <param name="map">The tilemap to set tiles in.</param>
            <param name="grid">The grid to get tile data from.</param>
            <param name="x">The column of the tile to set.</param>
            <param name="y">The row of the tile to set.</param>
        </member>
        <member name="T:Indigo.Loaders.BitwiseTileset">
            <summary>
            Loader for setting tiles in a Tilemap based on a bitwise sum of the tiles adjacent in a grid.
            </summary>
        </member>
        <member name="P:Indigo.Loaders.BitwiseTileset.Grid">
            <summary>
            The grid used to set the tiles in the tilemap.
            </summary>
        </member>
        <member name="P:Indigo.Loaders.BitwiseTileset.Tilemap">
            <summary>
            The tilemap.
            </summary>
        </member>
        <member name="M:Indigo.Loaders.BitwiseTileset.#ctor(Indigo.Graphics.Tilemap,Indigo.Utils.IGrid{System.Boolean},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="tilemap">The tilemap to set tiles in.</param>
            <param name="grid">The grid to get tile data from.</param>
            <param name="setImmediately">Whether the tilemap should be filled in immediately.</param>
        </member>
        <member name="M:Indigo.Loaders.BitwiseTileset.Refresh">
            <summary>
            Rebuild the tilemap with data from the Grid.
            </summary>
        </member>
        <member name="M:Indigo.Loaders.BitwiseTileset.RefreshTile(System.Int32,System.Int32)">
            <summary>
            Rebuild the given tile and the eight tiles surrounding it.
            </summary>
            <param name="column">The column of tile to rebuild.</param>
            <param name="row">The row of the tile to rebuild.</param>
        </member>
        <member name="M:Indigo.Loaders.BitwiseTileset.CreateFromGrid(Indigo.Graphics.Tilemap,Indigo.Utils.IGrid{System.Boolean})">
            <summary>
            Set every tile in the tilemap based on a collision grid
            </summary>
            <param name="map">The tilemap to set tiles in.</param>
            <param name="grid">The grid to get tile data from.</param>
        </member>
        <member name="M:Indigo.Loaders.BitwiseTileset.SetTile(Indigo.Graphics.Tilemap,Indigo.Utils.IGrid{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Set a single tile in a tilemap based on a collision grid.
            </summary>
            <param name="map">The tilemap to set tiles in.</param>
            <param name="grid">The grid to get tile data from.</param>
            <param name="x">The column of the tile to set.</param>
            <param name="y">The row of the tile to set.</param>
        </member>
        <member name="M:Indigo.Loaders.OgmoConstructorAttribute.#ctor(System.String[])">
            <summary>
            Enables the OgmoLoader class to pass parameters to the constructor of an Entity class.
            </summary>
            <param name="parameterNames">
            <para>A series of parameters naming the Ogmo entity attributes that should be passed to this constructor.</para>
            <para>They must appear in the same order as they appear in the constructor of the Entity!</para>
            </param>
        </member>
        <member name="T:Indigo.Loaders.IOgmoNodeHandler">
            <summary>
            Entities implementing this interface will be passed their source XML node when constructed.
            </summary>
        </member>
        <member name="T:Indigo.Loaders.OgmoLoader">
            <summary>
            Loads an Ogmo Editor level file (.oel) and creates an array of entities to add to a world.
            </summary>
        </member>
        <member name="M:Indigo.Loaders.OgmoLoader.RegisterClassAlias``1(System.String)">
            <summary>
            Register an Entity class under a different name than it appears in code.
            This is only needed if you're using a single class to represent multiple Ogmo types,
            or in the case of a naming mismatch.
            </summary>
            <param name="name">The name to register the alias with.</param>
        </member>
        <member name="M:Indigo.Loaders.OgmoLoader.RegisterClassAlias(System.Type,System.String)">
            <summary>
            Register an Entity class under a different name than it appears in code.
            This is only needed if you're using a single class to represent multiple Ogmo types,
            or in the case of a naming mismatch.
            </summary>
            <param name="type">The Type to register.</param>
            <param name="name">The name to register the alias with.</param>
        </member>
        <member name="M:Indigo.Loaders.OgmoLoader.GetLevelProperties(System.Xml.XmlDocument)">
            <summary>
            Get a dictionary of level properties and their values.
            </summary>
            <param name="oel">The Ogmo level XML.</param>
            <returns>The loaded dictionary.</returns>
        </member>
        <member name="M:Indigo.Loaders.OgmoLoader.GetLevelProperties``1(System.Xml.XmlDocument)">
            <summary>
            Create an object and assign its members from values on an Ogmo level file.
            </summary>
            <param name="oel">The Ogmo level XML.</param>
            <returns>The newly created object.</returns>
        </member>
        <member name="M:Indigo.Loaders.OgmoLoader.ApplyLevelProperties``1(System.Xml.XmlDocument,``0)">
            <summary>
            Assign properties or fields on an object from values on an Ogmo level file.
            </summary>
            <param name="oel">The Ogmo level XML.</param>
            <param name="target">The object to apply properties on.</param>
        </member>
        <member name="M:Indigo.Loaders.OgmoLoader.TryGetLevelProperty``1(System.Xml.XmlDocument,System.String,``0@)">
            <summary>
            Attempt to read a single property from a level file, converting it to a specified type.
            </summary>
            <param name="oel">The Ogmo level XML.</param>
            <param name="name">The name of the property to read.</param>
            <param name="result">Assigned on success.</param>
            <returns>Whether the property was found and read successfully.</returns>
        </member>
        <member name="M:Indigo.Loaders.OgmoLoader.BuildLevelAsArray(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Load Entities from an Ogmo level file into an array.
            </summary>
            <param name="oel">The xml of the level.</param>
            <param name="autoLayer">If each entity's layer should be set based on its order in the oel. Only values of 0 will be overwritten.</param>
            <returns>An array containing all Entities loaded.</returns>
        </member>
        <member name="F:Indigo.Log.DisplayCallingMethod">
            <summary>
            Whether the method calling Log() should be displayed before the message.
            </summary>
        </member>
        <member name="M:Indigo.Rendering.RenderJob.DelegateRender(System.Single,System.Single,Indigo.Camera)">
            <summary>
            Convenience function for setting up common properties.
            Pass all parameters from the graphic's Render method.
            </summary>
        </member>
        <member name="M:Indigo.Rendering.RenderJob.SetCommonModifiers(Indigo.Graphics.Graphic)">
            <summary>
            Pass 'this' from a graphic class to automatically set common variables:
            Relative, ScrollX, ScrollY, X, Y
            </summary>
        </member>
        <member name="T:Indigo.Rendering.Shader">
            <summary>
            GLSL shader that can be applied to Graphics.
            </summary>
        </member>
        <member name="M:Indigo.Rendering.Shader.SetParameter(System.String,Indigo.Graphics.Color)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="color">The color to set it to.</param>
        </member>
        <member name="M:Indigo.Rendering.Shader.SetParameter(System.String,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The value to set it to.</param>
        </member>
        <member name="M:Indigo.Rendering.Shader.SetParameter(System.String,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec2.</param>
            <param name="y">The first value of a vec2.</param>
        </member>
        <member name="M:Indigo.Rendering.Shader.SetParameter(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec3.</param>
            <param name="y">The second value of a vec3.</param>
            <param name="z">The third value of a vec3.</param>
        </member>
        <member name="M:Indigo.Rendering.Shader.SetParameter(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="x">The first value of a vec4.</param>
            <param name="y">The second value of a vec4.</param>
            <param name="z">The third value of a vec4.</param>
            <param name="w">The fourth value of a vec4.</param>
        </member>
        <member name="M:Indigo.Rendering.Shader.SetParameter(System.String,Indigo.Content.Texture)">
            <summary>
            Set a parameter on the shader.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
            <param name="texture">The texture to set it to.</param>
        </member>
        <member name="M:Indigo.Rendering.Shader.SetAsCurrentTexture(System.String)">
            <summary>
            Set a parameter on the shader.
            This will cause the named parameter to use the texture assigned to the drawable.
            </summary>
            <param name="name">The parameter in the shader to set.</param>
        </member>
        <member name="T:Indigo.Resources.Embeds">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.console_debug">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.console_output">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.console_pause">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.console_play">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.console_step">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.ConsoleFont">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Indigo.Resources.Embeds.DefaultFont">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="F:Indigo.Screen.ClearColor">
            <summary>
            The screen refresh color. Defaults to black.
            </summary>
        </member>
        <member name="P:Indigo.Screen.Vsync">
            <summary>
            Whether vsync is enabled.
            </summary>
        </member>
        <member name="P:Indigo.Screen.Title">
            <summary>
            The window title.
            </summary>
        </member>
        <member name="P:Indigo.Screen.Width">
            <summary>
            Current width of the screen.
            </summary>
        </member>
        <member name="P:Indigo.Screen.Height">
            <summary>
            Current height of the screen.
            </summary>
        </member>
        <member name="P:Indigo.Screen.Fullscreen">
            <summary>
            Whether the display mode should be fullscreen.
            </summary>
        </member>
        <member name="M:Indigo.Screen.Resize(System.Int32,System.Int32)">
            <summary>
            Resize the window.
            </summary>
            <param name="width">New width</param>
            <param name="height">New height</param>
        </member>
        <member name="P:Indigo.Solvers.AStarNode`2.ConnectionCount">
            <summary>
            <para>The number of nodes that this node leads to.</para>
            <para>Connections may be one-way.</para>
            </summary>
        </member>
        <member name="P:Indigo.Solvers.AStarPath`1.Count">
            <summary>
            The number of nodes in the path.
            </summary>
        </member>
        <member name="P:Indigo.Solvers.AStarPath`1.Remaining">
            <summary>
            The number of nodes remaining in the path.
            </summary>
        </member>
        <member name="M:Indigo.Solvers.AStarPath`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="nodes">A list of nodes to use as the pathfinding mesh.</param>
        </member>
        <member name="M:Indigo.Solvers.AStarPath`1.Peek">
            <summary>
            Returns the next node in the path without removing it.
            </summary>
            <returns>The next node, or null if no more exist.</returns>
        </member>
        <member name="M:Indigo.Solvers.AStarPath`1.Lookahead(System.Int32)">
            <summary>
            Gets the node a given number of steps ahead of the current.
            </summary>
            <param name="count">How many nodes ahead the function should look, where Lookahead(0) == Peek()</param>
            <returns>The specified node, or null if the index is greater than or equal to <see cref="P:Indigo.Solvers.AStarPath`1.Remaining" /> </returns>
        </member>
        <member name="M:Indigo.Solvers.AStarPath`1.Pop">
            <summary>
            Removes the next node in the path and returns it.
            </summary>
            <returns>The next node, or null if no more exist.</returns>
        </member>
        <member name="P:Indigo.Solvers.AStarPath`1.First">
            <summary>
            The first node in the path, or null if none exist. This will always be the same.
            </summary>
        </member>
        <member name="P:Indigo.Solvers.AStarPath`1.Last">
            <summary>
            The final node in the path, or null if none exist. May change if the path is appended to.
            </summary>
        </member>
        <member name="M:Indigo.Solvers.AStarPath`1.Reset">
            <summary>
            <para>Resets the path to its original state.</para>
            <para>If nodes were appended to the path by passing it to GetPath(), they will not be removed.</para>
            </summary>
        </member>
        <member name="M:Indigo.Subsystem.OnLoad">
            <summary>
            Called when the subsystem is loaded into the engine.
            </summary>
        </member>
        <member name="M:Indigo.Subsystem.OnUnload">
            <summary>
            Called when the subsystem is unloaded (at engine shutdown).
            </summary>
        </member>
        <member name="M:Indigo.Subsystem.Update">
            <summary>
            Called when the subsystem is updated (after the current world is updated)
            </summary>
        </member>
        <member name="M:Indigo.Utils.Internal.ComponentRegistry.AddSpecialized(Indigo.Component)">
            <summary>
            Adds the component to specific lists based on its type.
            </summary>
            <param name="component">The component to add.</param>
        </member>
        <member name="M:Indigo.Utils.Internal.ComponentRegistry.RemoveSpecialized(Indigo.Component)">
            <summary>
            Removes the component from specific lists based on its type.
            </summary>
            <param name="component">The component to remove.</param>
        </member>
        <member name="M:Indigo.Utils.Internal.EntityLists.UpdateLists">
            <summary>
            Updates the add/remove lists at the end of the frame.
            </summary>
        </member>
        <member name="M:Indigo.Utils.Internal.EntityLists.AddUpdate(Indigo.Entity)">
            <summary>
            Adds an Entity to the update list.
            </summary>
            <param name="e">The Entity to add.</param>
        </member>
        <member name="M:Indigo.Utils.Internal.EntityLists.RemoveUpdate(Indigo.Entity)">
            <summary>
            Removes an Entity from the update list.
            </summary>
            <param name="e">The Entity to remove.</param>
        </member>
        <member name="M:Indigo.Utils.Internal.EntityLists.AddRender(Indigo.Entity)">
            <summary>
            Adds Entity to the render
            </summary>
            <param name="e">The Entity to add</param>
        </member>
        <member name="M:Indigo.Utils.Internal.EntityLists.RemoveRender(Indigo.Entity)">
            <summary>
            Removes Entity from the render list.
            </summary>
            <param name="e">The Entity to remove</param>
        </member>
        <member name="M:Indigo.Utils.Internal.EntityLists.RegisterName(Indigo.Entity)">
            <summary>
            Register's the Entity's instance name.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Indigo.Utils.Internal.EntityLists.UnregisterName(Indigo.Entity)">
            <summary>
            Unregister's the Entity's instance name.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Indigo.Utils.Lerp">
            <summary>
            Description of Lerp.
            </summary>
        </member>
        <member name="M:Indigo.Utils.Lerp.Float(System.Single,System.Single,System.Single)">
            <summary>
            Linear interpolation between two values.
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="t">Interpolation factor</param>
            <returns>When t=0, returns a. When t=1, returns b. When t=0.5, will return halfway between a and b. Etc.</returns>
        </member>
        <member name="M:Indigo.Utils.Lerp.Color(System.Int32,System.Int32,System.Single)">
            <summary>
            Linear interpolation between two colors.
            </summary>
            <param name="from">First color.</param>
            <param name="to">Second color.</param>
            <param name="t">Interpolation value. Clamped to the range [0, 1].</param>
            <returns>RGB component-interpolated color value.</returns>
        </member>
        <member name="F:Indigo.Utils.MathHelper.DEG">
            <summary>
            Multiply a radian angle value by this to convert it to degrees.
            </summary>
        </member>
        <member name="F:Indigo.Utils.MathHelper.RAD">
            <summary>
            Multiply a degree angle by this to convert it to radians.
            </summary>
        </member>
        <member name="M:Indigo.Utils.MathHelper.Angle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Finds the angle (in degrees) from point 1 to point 2.
            </summary>
            <param name="x1">The first x-position.</param>
            <param name="y1">The first y-position.</param>
            <param name="x2">The second x-position.</param>
            <param name="y2">The second y-position.</param>
            <returns>The angle from (x1, y1) to (x2, y2).</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.AngleXY(System.Single@,System.Single@,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the x/y values of an object to a vector of the specified angle and length.
            </summary>
            <param name="X">X coordinate of the object to set.</param>
            <param name="Y">Y coordinate of the object to set.</param>
            <param name="angle">The angle of the vector, in degrees.</param>
            <param name="length">The distance to the vector from (0, 0).</param>
            <param name="xOffset">X offset.</param>
            <param name="yOffset">Y offset.</param>
        </member>
        <member name="M:Indigo.Utils.MathHelper.AngleDiff(System.Single,System.Single)">
            <summary>
            Gets the difference of two angles, wrapped around to the range -180 to 180.
            </summary>
            <param name="a">First angle in degrees.</param>
            <param name="b">Second angle in degrees.</param>
            <returns>Difference in angles, wrapped around to the range -180 to 180.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Find the distance between two points.
            </summary>
            <param name="x1">The first x-position.</param>
            <param name="y1">The first y-position.</param>
            <param name="x2">The second x-position.</param>
            <param name="y2">The second y-position.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.DistanceSquared(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Find the squared distance between two points.
            </summary>
            <param name="x1">The first x-position.</param>
            <param name="y1">The first y-position.</param>
            <param name="x2">The second x-position.</param>
            <param name="y2">The second y-position.</param>
            <returns>The squared distance.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.DistanceRects(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Find the distance between two rectangles. Will return 0 if the rectangles overlap.
            </summary>
            <param name="x1">The x-position of the first rect.</param>
            <param name="y1">The y-position of the first rect.</param>
            <param name="w1">The width of the first rect.</param>
            <param name="h1">The height of the first rect.</param>
            <param name="x2">The x-position of the second rect.</param>
            <param name="y2">The y-position of the second rect.</param>
            <param name="w2">The width of the second rect.</param>
            <param name="h2">The height of the second rect.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.DistanceRectPoint(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Find the distance between a point and a rectangle. Returns 0 if the point is within the rectangle.
            </summary>
            <param name="px">The x-position of the point.</param>
            <param name="py">The y-position of the point.</param>
            <param name="rx">The x-position of the rect.</param>
            <param name="ry">The y-position of the rect.</param>
            <param name="rw">The width of the rect.</param>
            <param name="rh">The height of the rect.</param>
            <returns>The distance.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the value within the minimum and maximum values.
            </summary>
            <param name="value">The value to evaluate.</param>
            <param name="min">The minimum range.</param>
            <param name="max">The maximum range.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the value within the minimum and maximum values.
            </summary>
            <param name="value">The value to evaluate.</param>
            <param name="min">The minimum range.</param>
            <param name="max">The maximum range.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the value within the minimum and maximum values.
            </summary>
            <param name="value">The value to evaluate.</param>
            <param name="min">The minimum range.</param>
            <param name="max">The maximum range.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.ClampInRect(System.Single@,System.Single@,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Clamps the object inside the rectangle.
            </summary>
            <param name="objX">The X property of the object to clamp.</param>
            <param name="objY">The Y property of the object to clamp.</param>
            <param name="x">Rectangle's x.</param>
            <param name="y">Rectangle's y.</param>
            <param name="width">Rectangle's width.</param>
            <param name="height">Rectangle's height.</param>
            <param name="padding">Optional padding around the edges.</param>
        </member>
        <member name="M:Indigo.Utils.MathHelper.Scale(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transfers a value from one scale to another scale. For example, scale(.5, 0, 1, 10, 20) == 15, and scale(3, 0, 5, 100, 0) == 40.
            </summary>
            <param name="value">The value on the first scale.</param>
            <param name="min">The minimum range of the first scale.</param>
            <param name="max">The maximum range of the first scale.</param>
            <param name="min2">The minimum range of the second scale.</param>
            <param name="max2">The maximum range of the second scale.</param>
            <returns>The scaled value.</returns>
        </member>
        <member name="M:Indigo.Utils.MathHelper.ScaleClamped(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Transfers a value from one scale to another scale, but clamps the return value within the second scale.
            </summary>
            <param name="value">The value on the first scale.</param>
            <param name="min">The minimum range of the first scale.</param>
            <param name="max">The maximum range of the first scale.</param>
            <param name="min2">The minimum range of the second scale.</param>
            <param name="max2">The maximum range of the second scale.</param>
            <returns>The scaled and clamped value.</returns>
        </member>
        <member name="T:Indigo.Utils.Approach">
            <summary>
            A collection of stateless easing functions.
            </summary>
        </member>
        <member name="M:Indigo.Utils.Approach.Towards(System.Single,System.Single,System.Single)">
            <summary>
            Approaches the value towards the target, by the specified amount, without overshooting the target.
            </summary>
            <param name="value">The starting value.</param>
            <param name="target">The target that you want value to approach.</param>
            <param name="amount">How much you want the value to approach target by.</param>
            <returns>The new value.</returns>
        </member>
        <member name="M:Indigo.Utils.Approach.Towards(System.Single@,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            Steps X and Y coordinates towards a point.
            </summary>
            <param name="x">The X value to move</param>
            <param name="y">The Y value to move</param>
            <param name="toX">X position to step towards.</param>
            <param name="toY">Y position to step towards.</param>
            <param name="distance">The distance to step (will not overshoot target).</param>
        </member>
        <member name="M:Indigo.Utils.Approach.TowardsWithDecay(System.Single@,System.Single,System.Single)">
            <summary>
            Approach one value to another by a constant distance scalar.
            </summary>
            <param name="target">The current value.</param>
            <param name="to">The desired value.</param>
            <param name="amount">The amount to move each time. Default to 0.1 (1/10 of the distance)</param>
            <returns>The new value;</returns>
        </member>
        <member name="M:Indigo.Utils.Approach.Angle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Smoothly change an angle to point at a position.
            </summary>
            <param name="x">The x position of the object to be rotated.</param>
            <param name="y">The y position of the object to be rotated.</param>
            <param name="targetX">The x position of the object to aim towards.</param>
            <param name="targetY">The y position of the object to aim towards.</param>
            <param name="currentAngle">The angle of the object to be rotated.</param>
            <param name="lookEase">How drastic the approach should be. Default to 0.3 (3/10 of the distance).</param>
            <returns>The resulting angle, in degrees.</returns>
        </member>
        <member name="T:Indigo.Utils.Choose">
            <summary>
            Utility class for performing selections on collections.
            By Jacob Albano (www.jacobalbano.com)
            MIT license (http://choosealicense.com/licenses/mit/)
            </summary>
        </member>
        <member name="M:Indigo.Utils.Choose.#ctor(System.Func{System.Double})">
            <summary>
            Constructor.
            </summary>
            <param name="rng">A method that returns a floating-point number between 0 and 1 (inclusive)</param>
        </member>
        <member name="M:Indigo.Utils.Choose.From``1(System.Collections.Generic.IList{``0})">
            <summary>
            Choose a random item from a list.
            </summary>
            <param name="list">The list to choose from.</param>
            <returns>The chosen item.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Option``1(``0[])">
            <summary>
            Choose a random item from a series of options.
            </summary>
            <param name="options">A parameter list of options to choose from.</param>
            <returns>The chosen item.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Character(System.String)">
            <summary>
            Choose a random character from a string.
            </summary>
            <param name="input">The string to choose from.</param>
            <returns>The chosen character.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Enum``1">
            <summary>
            Choose a random enum from an enum type.
            </summary>
            <returns>The chosen enum.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Field``1(System.Object)">
            <summary>
            Choose a random field of a given type from an object.
            </summary>
            <param name="instance">The object to pull fields from.</param>
            <typeparam name="T">The type of the field to choose.</typeparam>
            <returns>The chosen field's value.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.StaticField``2">
            <summary>
            Choose a random static field of a given type from a class.
            </summary>
            <typeparam name="TResult">The type of the field to choose.</typeparam>
            <typeparam name="TClass">The class to pull fields from.</typeparam>
            <returns>The chosen field's value.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Property``1(System.Object)">
            <summary>
            Choose a random property of a given type from an object.
            </summary>
            <param name="instance">The object to pull properties from.</param>
            <typeparam name="T">The type of the property to choose.</typeparam>
            <returns>The chosen property's value.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.StaticProperty``2">
            <summary>
            Choose a random static property of a given type from a class.
            </summary>
            <typeparam name="TResult">The type of the properties to choose.</typeparam>
            <typeparam name="TClass">The class to pull properties from.</typeparam>
            <returns>The chosen property's value.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Weighted``1(System.Collections.Generic.IList{``0},System.Double[])">
            <summary>
            Choose randomly from a list where some options are more likely than others.
            </summary>
            <param name="options">The list of options.</param>
            <param name="weights">
            <para>A parameter list of weights, where higher numbers are more likely to be chosen.</para>
            <para>The options list and weight list must be the same length.</para></param>
            <returns>The chosen option.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Weighted``1(System.Collections.Generic.IDictionary{``0,System.Double})">
            <summary>
            Choose a random key from a dictionary where the corresponding value determines its likelyhood of being chosen.
            </summary>
            <param name="weightedOptions">The dictionary to choose from.</param>
            <returns>The chosen option.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.EnumWeighted``1(System.Double[])">
            <summary>
            Choose a random enum from an enum type where some options are more likely than others.
            </summary>
            <param name="weights">
            <para>A parameter list of weights, where higher numbers are more likely to be chosen.</para>
            <para>The enum count and weight list must be the same length.</para></param>
            <returns></returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Next``1(``0,System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Returns the next item after current in the list of options.
            </summary>
            <param name="current">The currently selected item (must be one of the options).</param>
            <param name="options">An array of all the items to cycle through.</param>
            <param name="loop">If true, will jump to the first item after the last item is reached.</param>
            <returns>The next item in the list.</returns>
        </member>
        <member name="M:Indigo.Utils.Choose.Prev``1(``0,System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Returns the previous item before current in the list of options.
            </summary>
            <param name="current">The currently selected item (must be one of the options).</param>
            <param name="options">An array of all the items to cycle through.</param>
            <param name="loop">If true, will jump to the last item after the first item is reached.</param>
            <returns>The next item in the list.</returns>
        </member>
        <member name="T:Indigo.Utils.MessageResult">
            <summary>
            A small utility class to allow messages to "return" values. Functionally similar to out and ref parameters.
            Pass a MessageResult instance to a message call and set the value from the message response.
            </summary>
        </member>
        <member name="F:Indigo.Utils.MessageResult.Value">
            <summary>
            The payload value.
            </summary>
        </member>
        <member name="T:Indigo.Utils.NodeSystem">
            <summary>
            Small wrapper around a list of nodes, with a few utility functions.
            </summary>
        </member>
        <member name="P:Indigo.Utils.NodeSystem.Count">
            <summary>
            The number of nodes currently held.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Randomize">
            <summary>
            Randomizes the seed.
            </summary>
            <returns>The seed's value prior to randomizing it.</returns>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Chance(System.Single)">
            <summary>
            Determines the chance of a condition.
            </summary>
            <param name="percentage">A value between 0 and 100.</param>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.InCircle(System.Single)">
            <summary>
            Point within radiusMax from (0, 0).
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.InCircle(System.Single,System.Single)">
            <summary>
            Point within radiusMax from (0, 0), and no closer than radiusMin.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Bool">
            <summary>
            Either true or false.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Angle">
            <summary>
            Value from 0 to 360. Lower inclusive, upper exclusive.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Sign">
            <summary>
            Either -1 or 1.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Int">
            <summary>
            Value from 0 to int.MaxValue.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Int(System.Int32)">
            <summary>
            Value from 0 to max. Lower inclusive, upper exclusive.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Int(System.Int32,System.Int32)">
            <summary>
            Value from min to max. Lower inclusive, upper exclusive.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Float">
            <summary>
            Value from 0 to 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Float(System.Single)">
            <summary>
            Value from 0 to max. Lower inclusive, upper exclusive.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Float(System.Single,System.Single)">
            <summary>
            Value from min to max. Lower inclusive, upper exclusive.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Color">
            <summary>
            Color with random components.
            </summary>
        </member>
        <member name="M:Indigo.Utils.SeededRandom.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Shuffles the order of the elements in a list.
            </summary>
        </member>
        <member name="M:Indigo.Utils.Spline.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Constructor.
            </summary>
            <param name="points">The points that comprise the spline.</param>
        </member>
        <member name="M:Indigo.Utils.Spline.#ctor(System.Single[])">
            <summary>
            Constructor.
            </summary>
            <param name="points">The points that comprise the spline.</param>
        </member>
        <member name="M:Indigo.Utils.Spline.Point(System.Single)">
            <summary>
            Get the value of the spline at a specified time.
            </summary>
            <param name="t">The completion of the spline, in range [0..1].</param>
            <returns>The value of the spline at the given time.</returns>
        </member>
        <member name="M:Indigo.Utils.Spline.Step(System.Single)">
            <summary>
            Get each point on the curve at a specified interval.
            </summary>
            <param name="interval">How far the calculation should step on the curve.</param>
            <para>Interval should lie in the range [0..1] where 0 represents</para>
            <para>the very beginning of the spline and 1 represents the end.</para>
            <returns>Each point along the spline, at the specified interval.</returns>
        </member>
        <member name="M:Indigo.Utils.Spline.Reverse">
            <summary>
            Reverse the order of the points in the spline.
            </summary>
        </member>
        <member name="T:Indigo.Utils.Types">
            <summary>
            A simple class for basic reflection.
            </summary>
        </member>
        <member name="M:Indigo.Utils.Types.GetTypeFromAllAssemblies(System.String)">
            <summary>
            Searches all known assemblies for a type and returns that type.
            </summary>
            <param name="type">The name of the type to search for.</param>
            <returns>The type found, or null if no match.</returns>
        </member>
        <member name="M:Indigo.Utils.Types.GetTypeFromAllAssemblies``1(System.String)">
            <summary>
            <para>Searches all known assemblies for a type and returns that type.</para>
            <para>This overload checks that the type implements or inherits from the type parameter.</para>
            </summary>
            <param name="type">The name of the type to search for.</param>
            <returns>The type found, or null if no match.</returns>
        </member>
        <member name="T:Indigo.Utils.Wildcard">
            <summary>
            Represents a wildcard running on the
            <see cref="N:System.Text.RegularExpressions"/> engine.
            </summary>
        </member>
        <member name="M:Indigo.Utils.Wildcard.#ctor(System.String)">
            <summary>
            Initializes a wildcard with the given search pattern.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
        </member>
        <member name="M:Indigo.Utils.Wildcard.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a wildcard with the given search pattern and options.
            </summary>
            <param name="pattern">The wildcard pattern to match.</param>
            <param name="options">A combination of one or more RegexOptions".</param>
        </member>
        <member name="M:Indigo.Utils.Wildcard.WildcardToRegex(System.String)">
            <summary>
            Converts a wildcard to a regex.
            </summary>
            <param name="pattern">The wildcard pattern to convert.</param>
            <returns>A regex equivalent of the given wildcard.</returns>
        </member>
        <member name="M:Indigo.GridDataLoaders.LoadFromString(Indigo.Utils.IGrid{System.Int32},System.String,System.String,System.String)">
            <summary>
            Loads the tile index data from a string.
            The implicit array should not be bigger than the grid.
            </summary>
            <param name="str">The string data, which is a set of tile values separated by the columnSep and rowSep strings.</param>
            <param name="columnSeperator">The string that separates each tile value on a row, default is ",".</param>
            <param name="rowSeperator">The string that separates each row of tiles; default is "\n".</param>
        </member>
        <member name="M:Indigo.GridDataLoaders.LoadFromString(Indigo.Utils.IGrid{System.Boolean},System.String,System.String,System.String)">
            <summary>
            Loads the tile index data from a string.
            The implicit array should not be bigger than the grid.
            </summary>
            <param name="str">The string data, which is a set of tile values separated by the columnSep and rowSep strings.</param>
            <param name="columnSeperator">The string that separates each tile value on a row, default is ",".</param>
            <param name="rowSeperator">The string that separates each row of tiles; default is "\n".</param>
        </member>
        <member name="M:Indigo.IRenderStepSorters.BringToFront(Indigo.IRenderStep)">
            <summary>
            Bring this item to the front of its render step.
            </summary>
            <returns>Whether the item changed order.</returns>
        </member>
        <member name="M:Indigo.IRenderStepSorters.BringForward(Indigo.IRenderStep)">
            <summary>
            Shift this item forward in its render step.
            </summary>
            <returns>Whether the item changed order.</returns>
        </member>
        <member name="M:Indigo.IRenderStepSorters.SendToBack(Indigo.IRenderStep)">
            <summary>
            Send this item to the back of its render step.
            </summary>
            <returns>Whether the item changed order.</returns>
        </member>
        <member name="M:Indigo.IRenderStepSorters.SendBackward(Indigo.IRenderStep)">
            <summary>
            Shift this item backwards in its render step.
            </summary>
            <returns>Whether the item changed order.</returns>
        </member>
        <member name="M:Indigo.IRenderStepSorters.IsAtFront(Indigo.IRenderStep)">
            <summary> If this item is as at the front of its render step.</summary>
        </member>
        <member name="M:Indigo.IRenderStepSorters.IsAtBack(Indigo.IRenderStep)">
            <summary> If the Entity as at the back of its layer.</summary>
        </member>
        <member name="M:Indigo.MessageListener.OnMessage(System.Enum,System.Object[])">
            <summary>
            Called when this recieves a message broadcast from the World
            </summary>
            <param name="message">The type of the message.</param>
            <param name="arguments">A set of arguments.</param>
        </member>
        <member name="M:Indigo.MessageListener.AddResponse(System.Enum,System.Action{System.Object[]})">
            <summary>
            Add a message response.
            </summary>
            <param name="message">The message type.</param>
            <param name="response">The response callback to add.</param>
        </member>
        <member name="M:Indigo.MessageListener.RemoveResponse(System.Enum,System.Action{System.Object[]})">
            <summary>
            Remove a message response.
            </summary>
            <param name="message">The message type to remove the response from.</param>
            <param name="response">The response callback to remove.</param>
        </member>
        <member name="T:Indigo.World">
            <summary>
            Updated by Engine, main game container that holds all currently active Entities.
            Useful for organization, eg. "Menu", "Level1", etc.
            </summary>
        </member>
        <member name="F:Indigo.World.Visible">
            <summary>
            Whether to render the world.
            </summary>
        </member>
        <member name="F:Indigo.World.Active">
            <summary>
            Whether the world should update.
            </summary>
        </member>
        <member name="P:Indigo.World.Camera">
            <summary>
            The world camera.
            </summary>
        </member>
        <member name="P:Indigo.World.MouseX">
            <summary>
            X position of the mouse in the World.
            </summary>
        </member>
        <member name="P:Indigo.World.MouseY">
            <summary>
            Y position of the mouse in the World.
            </summary>
        </member>
        <member name="M:Indigo.World.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Indigo.World.Begin">
            <summary>
            Override this; called when the World is switched to, and set to the currently active world.
            </summary>
        </member>
        <member name="M:Indigo.World.End">
            <summary>
            Override this; called when World is changed, and the active world is no longer this.
            </summary>
        </member>
        <member name="M:Indigo.World.Update(Indigo.GameTime)">
            <summary>
            Performed by the game loop, updates all contained Entities.
            If you override this to give your World update code, remember
            to call base.update() or your Entities will not be updated.
            </summary>
        </member>
        <member name="M:Indigo.World.Render">
            <summary>
            Performed by the game loop, updates all contained Entities.
            If you override this to give your World update code, remember
            to call base.update() or your Entities will not be updated.
            </summary>
        </member>
        <member name="M:Indigo.World.Add``1(``0)">
            <summary>
            Adds the Entity to the World at the end of the frame
            </summary>
            <param name="e">Entity object you want to add.</param>
            <returns>The added Entity object.</returns>
        </member>
        <member name="M:Indigo.World.Remove``1(``0)">
            <summary>
            Removes the Entity from the World at the end of the frame.
            </summary>
            <param name="e">Entity object you want to remove.</param>
            <returns>The removed Entity object.</returns>
        </member>
        <member name="M:Indigo.World.RemoveAll">
            <summary>
            Removes all Entities from the World at the end of the frame.
            </summary>
        </member>
        <member name="M:Indigo.World.AddList(Indigo.Entity[])">
            <summary>
            Adds multiple Entities to the world.
            </summary>
            <param name="list">Several Entities as arguments</param>
        </member>
        <member name="M:Indigo.World.AddList(System.Collections.Generic.IEnumerable{Indigo.Entity})">
            <summary>
            Adds multiple Entities to the world.
            </summary>
            <param name="list">A List of Entities to add.</param>
        </member>
        <member name="M:Indigo.World.RemoveList(Indigo.Entity[])">
            <summary>
            Removes multiple Entities from the world.
            </summary>
            <param name="list">Several Entities as arguments.</param>
        </member>
        <member name="M:Indigo.World.RemoveList(System.Collections.Generic.IEnumerable{Indigo.Entity})">
            <summary>
            Removes multiple Entities to the world.
            </summary>
            <param name="list">A List of Entities to remove.</param>
        </member>
        <member name="M:Indigo.World.AddGraphic(Indigo.Graphics.Graphic,System.Single,System.Single,System.Int32)">
            <summary>
            Adds an Entity to the World with the Graphic object.
            </summary>
            <param name="graphic">Graphic to assign the Entity.</param>
            <param name="x">X position of the Entity.</param>
            <param name="y">Y position of the Entity.</param>
            <param name="renderStep">Layer of the Entity.</param>
            <returns>The Entity that was added.</returns>
        </member>
        <member name="M:Indigo.World.AddComponent(Indigo.Component)">
            <summary>
            Adds an Entity to the World with the Graphic object.
            </summary>
            <param name="component">Component to assign the Entity.</param>
            <returns>The Entity that was added.</returns>
        </member>
        <member name="M:Indigo.World.AddCollider(Indigo.Colliders.Collider,System.Int32,System.Int32)">
            <summary>
            Adds an Entity to the World with the Collider object.
            </summary>
            <param name="collider">Collider to assign the Entity.</param>
            <param name="x">X position of the Entity.</param>
            <param name="y">Y position of the Entity.</param>
            <returns>The Entity that was added.</returns>
        </member>
        <member name="M:Indigo.World.BroadcastMessage(System.Enum,System.Object[])">
            <summary>
            Broadcasts a message to all entities in the world.
            </summary>
            <param name="message">The type of the message.</param>
            <param name="arguments">A set of arguments to pass to the message reciever.</param>
        </member>
        <member name="M:Indigo.World.GetCollisionsAt(System.Single,System.Single,System.String[])">
            <summary>
            Returns all colliders, with the specified types, which overlap with the specified point.
            </summary>
            <param name="x">X coordinate to test</param>
            <param name="y">Y coordinate to test</param>
            <param name="types">Collision types to check against</param>
        </member>
        <member name="M:Indigo.World.GetCollisionsWith(Indigo.Colliders.Collider,System.String[])">
            <summary>
            Returns all colliders, with the specified types, which collide with the supplied collider.
            </summary>
            <param name="collider">The collider to test</param>
            <param name="types">Collision types to check against</param>
        </member>
        <member name="M:Indigo.World.GetCollisionsWith(Indigo.Entity,System.String[])">
            <summary>
            Returns all colliders, with the specified types, which collide with the supplied entity.
            </summary>
            <param name="e">The entity to test</param>
            <param name="types">Collision types to check against</param>
        </member>
        <member name="P:Indigo.World.Count">
            <summary>
            How many Entities are in the World.
            </summary>
        </member>
        <member name="M:Indigo.World.ClassCount``1">
            <summary>
            How many entities of this Type exist in the world.
            </summary>
        </member>
        <member name="M:Indigo.World.ClassCount(System.Type)">
            <summary>
            How many entities of this Type exist in the world.
            </summary>
        </member>
        <member name="P:Indigo.World.UniqueRenderSteps">
            <summary>
            How many unique render steps are present in the entities in the world.
            </summary>
        </member>
        <member name="M:Indigo.World.GetAllEntities">
            <summary>
            Returns an enumerable of all entities in the world.
            </summary>
        </member>
        <member name="M:Indigo.World.GetAllEntitiesOnRenderStep(System.Int32)">
            <summary>Returns an enumerable of all entities with a given render step.</summary>
        </member>
        <member name="M:Indigo.World.GetAllEntitiesOnUpdateStep(System.Int32)">
            <summary>Returns an enumerable of all entities with a given update step.</summary>
        </member>
        <member name="M:Indigo.World.GetInstance(System.String)">
            <summary>
            Returns the Entity with the instance name, or null if none exists.
            </summary>
            <param name="name">Instance name of the Entity.</param>
            <returns>The named Entity, or null if it doesn't exist.</returns>
        </member>
        <member name="M:Indigo.World.AddManager``1(``0)">
            <summary>Adds an EntityManager to the world</summary>
        </member>
        <member name="M:Indigo.World.RemoveManager``1(``0)">
            <summary>Removes an EntityManager from the world</summary>
        </member>
        <member name="T:Glide.Ease">
            <summary>
            Static class with useful easer functions that can be used by Tweens.
            </summary>
        </member>
        <member name="M:Glide.Ease.ToAndFro(System.Func{System.Single,System.Single})">
            <summary>
            Ease a value to its target and then back. Use this to wrap another easing function.
            </summary>
        </member>
        <member name="M:Glide.Ease.ToAndFro(System.Single)">
            <summary>
            Ease a value to its target and then back.
            </summary>
        </member>
        <member name="M:Glide.Ease.ElasticIn(System.Single)">
            <summary>
            Elastic in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.ElasticOut(System.Single)">
            <summary>
            Elastic out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.ElasticInOut(System.Single)">
            <summary>
            Elastic in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuadIn(System.Single)">
            <summary>
            Quadratic in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuadOut(System.Single)">
            <summary>
            Quadratic out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuadInOut(System.Single)">
            <summary>
            Quadratic in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.CubeIn(System.Single)">
            <summary>
            Cubic in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.CubeOut(System.Single)">
            <summary>
            Cubic out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.CubeInOut(System.Single)">
            <summary>
            Cubic in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuartIn(System.Single)">
            <summary>
            Quart in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuartOut(System.Single)">
            <summary>
            Quart out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuartInOut(System.Single)">
            <summary>
            Quart in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuintIn(System.Single)">
            <summary>
            Quint in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuintOut(System.Single)">
            <summary>
            Quint out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.QuintInOut(System.Single)">
            <summary>
            Quint in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.SineIn(System.Single)">
            <summary>
            Sine in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.SineOut(System.Single)">
            <summary>
            Sine out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.SineInOut(System.Single)">
            <summary>
            Sine in and out
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.BounceIn(System.Single)">
            <summary>
            Bounce in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.BounceOut(System.Single)">
            <summary>
            Bounce out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.BounceInOut(System.Single)">
            <summary>
            Bounce in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.CircIn(System.Single)">
            <summary>
            Circle in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.CircOut(System.Single)">
            <summary>
            Circle out
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.CircInOut(System.Single)">
            <summary>
            Circle in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.ExpoIn(System.Single)">
            <summary>
            Exponential in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.ExpoOut(System.Single)">
            <summary>
            Exponential out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.ExpoInOut(System.Single)">
            <summary>
            Exponential in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.BackIn(System.Single)">
            <summary>
            Back in.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.BackOut(System.Single)">
            <summary>
            Back out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="M:Glide.Ease.BackInOut(System.Single)">
            <summary>
            Back in and out.
            </summary>
            <param name="t">Time elapsed.</param>
            <returns>Eased timescale.</returns>
        </member>
        <member name="P:Glide.Tween.TimeRemaining">
            <summary>
            The time remaining before the tween ends or repeats.
            </summary>
        </member>
        <member name="P:Glide.Tween.Completion">
            <summary>
            A value between 0 and 1, where 0 means the tween has not been started and 1 means that it has completed.
            </summary>
        </member>
        <member name="P:Glide.Tween.Looping">
            <summary>
            Whether the tween is currently looping.
            </summary>
        </member>
        <member name="P:Glide.Tween.Target">
            <summary>
            The object this tween targets. Will be null if the tween represents a timer.
            </summary>
        </member>
        <member name="M:Glide.Tween.From(System.Object)">
            <summary>
            Apply target values to a starting point before tweening.
            </summary>
            <param name="values">The values to apply, in an anonymous type ( new { prop1 = 100, prop2 = 0} ).</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.Ease(System.Func{System.Single,System.Single})">
            <summary>
            Set the easing function.
            </summary>
            <param name="ease">The Easer to use.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.OnBegin(System.Action)">
            <summary>
            Set a function to call when the tween begins (useful when using delays). Can be called multiple times for compound callbacks.
            </summary>
            <param name="callback">The function that will be called when the tween starts, after the delay.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.OnComplete(System.Action)">
            <summary>
            Set a function to call when the tween finishes. Can be called multiple times for compound callbacks.
            If the tween repeats infinitely, this will be called each time; otherwise it will only run when the tween is finished repeating.
            </summary>
            <param name="callback">The function that will be called on tween completion.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.OnUpdate(System.Action)">
            <summary>
            Set a function to call as the tween updates. Can be called multiple times for compound callbacks.
            </summary>
            <param name="callback">The function to use.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.Repeat(System.Int32)">
            <summary>
            Enable repeating.
            </summary>
            <param name="times">Number of times to repeat. Leave blank or pass a negative number to repeat infinitely.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.RepeatDelay(System.Single)">
            <summary>
            Set a delay for when the tween repeats.
            </summary>
            <param name="delay">How long to wait before repeating.</param>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.Reflect">
            <summary>
            Sets the tween to reverse every other time it repeats. Repeating must be enabled for this to have any effect.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.Reverse">
            <summary>
            Swaps the start and end values of the tween.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.Rotation(Glide.Tween.RotationUnit)">
            <summary>
            Whether this tween handles rotation.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.Round">
            <summary>
            Whether tweened values should be rounded to integer values.
            </summary>
            <returns>A reference to this.</returns>
        </member>
        <member name="M:Glide.Tween.Cancel(System.String[])">
            <summary>
            Cancel tweening given properties.
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:Glide.Tween.Cancel">
            <summary>
            Remove tweens from the tweener without calling their complete functions.
            </summary>
        </member>
        <member name="M:Glide.Tween.CancelAndComplete">
            <summary>
            Assign tweens their final value and remove them from the tweener.
            </summary>
        </member>
        <member name="M:Glide.Tween.Pause">
            <summary>
            Set tweens to pause. They won't update and their delays won't tick down.
            </summary>
        </member>
        <member name="M:Glide.Tween.PauseToggle">
            <summary>
            Toggle tweens' paused value.
            </summary>
        </member>
        <member name="M:Glide.Tween.Resume">
            <summary>
            Resumes tweens from a paused state.
            </summary>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.SetLerper``1(System.Type)">
            <summary>
            Associate a Lerper class with a property type.
            </summary>
            <typeparam name="TLerper">The Lerper class to use for properties of the given type.</typeparam>
            <param name="propertyType">The type of the property to associate the given Lerper with.</param>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.SetLerper(System.Type,System.Type)">
            <summary>
            Associate a Lerper type with a property type.
            </summary>
            <param name="lerperType">The type of the Lerper to use for properties of the given type.</param>
            <param name="propertyType">The type of the property to associate the given Lerper with.</param>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.Tween``1(``0,System.Object,System.Single,System.Single,System.Boolean)">
            <summary>
            <para>Tweens a set of properties on an object.</para>
            <para>To tween instance properties/fields, pass the object.</para>
            <para>To tween static properties/fields, pass the type of the object, using typeof(ObjectType) or object.GetType().</para>
            </summary>
            <param name="target">The object or type to tween.</param>
            <param name="values">The values to tween to, in an anonymous type ( new { prop1 = 100, prop2 = 0} ).</param>
            <param name="duration">Duration of the tween in seconds.</param>
            <param name="delay">Delay before the tween starts, in seconds.</param>
            <param name="overwrite">Whether pre-existing tweens should be overwritten if this tween involves the same properties.</param>
            <returns>The tween created, for setting properties on.</returns>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.Timer(System.Single,System.Single)">
            <summary>
            Starts a simple timer for setting up callback scheduling.
            </summary>
            <param name="duration">How long the timer will run for, in seconds.</param>
            <param name="delay">How long to wait before starting the timer, in seconds.</param>
            <returns>The tween created, for setting properties.</returns>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.Cancel">
            <summary>
            Remove tweens from the tweener without calling their complete functions.
            </summary>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.CancelAndComplete">
            <summary>
            Assign tweens their final value and remove them from the tweener.
            </summary>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.Pause">
            <summary>
            Set tweens to pause. They won't update and their delays won't tick down.
            </summary>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.PauseToggle">
            <summary>
            Toggle tweens' paused value.
            </summary>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.Resume">
            <summary>
            Resumes tweens from a paused state.
            </summary>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.Update(System.Single)">
            <summary>
            Updates the tweener and all objects it contains.
            </summary>
            <param name="secondsElapsed">Seconds elapsed since last update.</param>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.TargetCancel(System.Object)">
            <summary>
            Cancel all tweens with the given target.
            </summary>
            <param name="target">The object being tweened that you want to cancel.</param>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.TargetCancel(System.Object,System.String[])">
            <summary>
            Cancel tweening named properties on the given target.
            </summary>
            <param name="target">The object being tweened that you want to cancel properties on.</param>
            <param name="properties">The properties to cancel.</param>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.TargetCancelAndComplete(System.Object)">
            <summary>
            Cancel, complete, and call complete callbacks for all tweens with the given target..
            </summary>
            <param name="target">The object being tweened that you want to cancel and complete.</param>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.TargetPause(System.Object)">
            <summary>
            Pause all tweens with the given target.
            </summary>
            <param name="target">The object being tweened that you want to pause.</param>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.TargetPauseToggle(System.Object)">
            <summary>
            Toggle the pause state of all tweens with the given target.
            </summary>
            <param name="target">The object being tweened that you want to toggle pause.</param>
        </member>
        <member name="M:Glide.Tween.TweenerImpl.TargetResume(System.Object)">
            <summary>
            Resume all tweens with the given target.
            </summary>
            <param name="target">The object being tweened that you want to resume.</param>
        </member>
        <member name="T:Priority_Queue.HeapPriorityQueue`1">
            <summary>
            An implementation of a min-Priority Queue using a heap.  Has O(1) .Contains()!
            See https://bitbucket.org/BlueRaja/high-speed-priority-queue-for-c/wiki/Getting%20Started for more information
            </summary>
            <typeparam name="T">The values in the queue.  Must implement the PriorityQueueNode interface</typeparam>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Instantiate a new Priority Queue
            </summary>
            <param name="maxNodes">The max nodes ever allowed to be enqueued (going over this will cause an exception)</param>
        </member>
        <member name="P:Priority_Queue.HeapPriorityQueue`1.Count">
            <summary>
            Returns the number of nodes in the queue.  O(1)
            </summary>
        </member>
        <member name="P:Priority_Queue.HeapPriorityQueue`1.MaxSize">
            <summary>
            Returns the maximum number of items that can be enqueued at once in this queue.  Once you hit this number (ie. once Count == MaxSize),
            attempting to enqueue another item will throw an exception.  O(1)
            </summary>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.Clear">
            <summary>
            Removes every node from the queue.  O(n) (So, don't do this often!)
            </summary>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.Contains(`0)">
            <summary>
            Returns (in O(1)!) whether the given node is in the queue.  O(1)
            </summary>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.Enqueue(`0,System.Double)">
            <summary>
            Enqueue a node - .Priority must be set beforehand!  O(log n)
            </summary>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.HasHigherPriority(`0,`0)">
            <summary>
            Returns true if 'higher' has higher priority than 'lower', false otherwise.
            Note that calling HasHigherPriority(node, node) (ie. both arguments the same node) will return false
            </summary>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.Dequeue">
            <summary>
            Removes the head of the queue (node with highest priority; ties are broken by order of insertion), and returns it.  O(log n)
            </summary>
        </member>
        <member name="P:Priority_Queue.HeapPriorityQueue`1.First">
            <summary>
            Returns the head of the queue, without removing it (use Dequeue() for that).  O(1)
            </summary>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.UpdatePriority(`0,System.Double)">
            <summary>
            This method must be called on a node every time its priority changes while it is in the queue.  
            <b>Forgetting to call this method will result in a corrupted queue!</b>
            O(log n)
            </summary>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.Remove(`0)">
            <summary>
            Removes a node from the queue.  Note that the node does not need to be the head of the queue.  O(log n)
            </summary>
        </member>
        <member name="M:Priority_Queue.HeapPriorityQueue`1.IsValidQueue">
            <summary>
            <b>Should not be called in production code.</b>
            Checks to make sure the queue is still in a valid state.  Used for testing/debugging the queue.
            </summary>
        </member>
        <member name="T:Priority_Queue.IPriorityQueue`1">
            <summary>
            The IPriorityQueue interface.  This is mainly here for purists, and in case I decide to add more implementations later.
            For speed purposes, it is actually recommended that you *don't* access the priority queue through this interface, since the JIT can
            (theoretically?) optimize method calls from concrete-types slightly better.
            </summary>
        </member>
        <member name="P:Priority_Queue.PriorityQueueNode.Priority">
            <summary>
            The Priority to insert this node at.  Must be set BEFORE adding a node to the queue
            </summary>
        </member>
        <member name="P:Priority_Queue.PriorityQueueNode.InsertionIndex">
            <summary>
            <b>Used by the priority queue - do not edit this value.</b>
            Represents the order the node was inserted in
            </summary>
        </member>
        <member name="P:Priority_Queue.PriorityQueueNode.QueueIndex">
            <summary>
            <b>Used by the priority queue - do not edit this value.</b>
            Represents the current position in the queue
            </summary>
        </member>
    </members>
</doc>
